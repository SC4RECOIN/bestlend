/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

type ErrorWithCode = Error & { code: number }
type MaybeErrorWithCode = ErrorWithCode | null | undefined

const createErrorFromCodeLookup: Map<number, () => ErrorWithCode> = new Map()
const createErrorFromNameLookup: Map<string, () => ErrorWithCode> = new Map()

/**
 * MatchingAssetGroups: 'Asset groups cannot be the same'
 *
 * @category Errors
 * @category generated
 */
export class MatchingAssetGroupsError extends Error {
  readonly code: number = 0x1770
  readonly name: string = 'MatchingAssetGroups'
  constructor() {
    super('Asset groups cannot be the same')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, MatchingAssetGroupsError)
    }
  }
}

createErrorFromCodeLookup.set(0x1770, () => new MatchingAssetGroupsError())
createErrorFromNameLookup.set(
  'MatchingAssetGroups',
  () => new MatchingAssetGroupsError()
)

/**
 * PriceNotValid: 'Invalid oracle price'
 *
 * @category Errors
 * @category generated
 */
export class PriceNotValidError extends Error {
  readonly code: number = 0x1771
  readonly name: string = 'PriceNotValid'
  constructor() {
    super('Invalid oracle price')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, PriceNotValidError)
    }
  }
}

createErrorFromCodeLookup.set(0x1771, () => new PriceNotValidError())
createErrorFromNameLookup.set('PriceNotValid', () => new PriceNotValidError())

/**
 * MissingAccount: 'Remaining account missing'
 *
 * @category Errors
 * @category generated
 */
export class MissingAccountError extends Error {
  readonly code: number = 0x1772
  readonly name: string = 'MissingAccount'
  constructor() {
    super('Remaining account missing')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, MissingAccountError)
    }
  }
}

createErrorFromCodeLookup.set(0x1772, () => new MissingAccountError())
createErrorFromNameLookup.set('MissingAccount', () => new MissingAccountError())

/**
 * InvalidTokenAccountOwner: 'Unexpected token account owner'
 *
 * @category Errors
 * @category generated
 */
export class InvalidTokenAccountOwnerError extends Error {
  readonly code: number = 0x1773
  readonly name: string = 'InvalidTokenAccountOwner'
  constructor() {
    super('Unexpected token account owner')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidTokenAccountOwnerError)
    }
  }
}

createErrorFromCodeLookup.set(0x1773, () => new InvalidTokenAccountOwnerError())
createErrorFromNameLookup.set(
  'InvalidTokenAccountOwner',
  () => new InvalidTokenAccountOwnerError()
)

/**
 * AccountValueBelowMin: 'Account below expected value'
 *
 * @category Errors
 * @category generated
 */
export class AccountValueBelowMinError extends Error {
  readonly code: number = 0x1774
  readonly name: string = 'AccountValueBelowMin'
  constructor() {
    super('Account below expected value')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, AccountValueBelowMinError)
    }
  }
}

createErrorFromCodeLookup.set(0x1774, () => new AccountValueBelowMinError())
createErrorFromNameLookup.set(
  'AccountValueBelowMin',
  () => new AccountValueBelowMinError()
)

/**
 * InvalidInstruction: 'Invalid instruction or intructions in unexpected order'
 *
 * @category Errors
 * @category generated
 */
export class InvalidInstructionError extends Error {
  readonly code: number = 0x1775
  readonly name: string = 'InvalidInstruction'
  constructor() {
    super('Invalid instruction or intructions in unexpected order')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidInstructionError)
    }
  }
}

createErrorFromCodeLookup.set(0x1775, () => new InvalidInstructionError())
createErrorFromNameLookup.set(
  'InvalidInstruction',
  () => new InvalidInstructionError()
)

/**
 * UnapprovedProgramID: 'Invalid program ID on instruction'
 *
 * @category Errors
 * @category generated
 */
export class UnapprovedProgramIDError extends Error {
  readonly code: number = 0x1776
  readonly name: string = 'UnapprovedProgramID'
  constructor() {
    super('Invalid program ID on instruction')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, UnapprovedProgramIDError)
    }
  }
}

createErrorFromCodeLookup.set(0x1776, () => new UnapprovedProgramIDError())
createErrorFromNameLookup.set(
  'UnapprovedProgramID',
  () => new UnapprovedProgramIDError()
)

/**
 * MissingObligationRefresh: 'Missing obligation refresh'
 *
 * @category Errors
 * @category generated
 */
export class MissingObligationRefreshError extends Error {
  readonly code: number = 0x1777
  readonly name: string = 'MissingObligationRefresh'
  constructor() {
    super('Missing obligation refresh')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, MissingObligationRefreshError)
    }
  }
}

createErrorFromCodeLookup.set(0x1777, () => new MissingObligationRefreshError())
createErrorFromNameLookup.set(
  'MissingObligationRefresh',
  () => new MissingObligationRefreshError()
)

/**
 * Attempts to resolve a custom program error from the provided error code.
 * @category Errors
 * @category generated
 */
export function errorFromCode(code: number): MaybeErrorWithCode {
  const createError = createErrorFromCodeLookup.get(code)
  return createError != null ? createError() : null
}

/**
 * Attempts to resolve a custom program error from the provided error name, i.e. 'Unauthorized'.
 * @category Errors
 * @category generated
 */
export function errorFromName(name: string): MaybeErrorWithCode {
  const createError = createErrorFromNameLookup.get(name)
  return createError != null ? createError() : null
}
