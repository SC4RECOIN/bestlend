/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as web3 from '@solana/web3.js'
import * as beetSolana from '@metaplex-foundation/beet-solana'
import * as beet from '@metaplex-foundation/beet'
import { Price, priceBeet } from '../types/Price'

/**
 * Arguments used to create {@link BestLendUserAccount}
 * @category Accounts
 * @category generated
 */
export type BestLendUserAccountArgs = {
  owner: web3.PublicKey
  address: web3.PublicKey
  collateralGroup: number
  debtGroup: number
  blackListedAssets: web3.PublicKey[] /* size: 5 */
  priceImpactBps: number
  lastAccountValue: Price
  lookupTable: web3.PublicKey
}

export const bestLendUserAccountDiscriminator = [
  128, 185, 135, 228, 212, 251, 57, 187,
]
/**
 * Holds the data for the {@link BestLendUserAccount} Account and provides de/serialization
 * functionality for that data
 *
 * @category Accounts
 * @category generated
 */
export class BestLendUserAccount implements BestLendUserAccountArgs {
  private constructor(
    readonly owner: web3.PublicKey,
    readonly address: web3.PublicKey,
    readonly collateralGroup: number,
    readonly debtGroup: number,
    readonly blackListedAssets: web3.PublicKey[] /* size: 5 */,
    readonly priceImpactBps: number,
    readonly lastAccountValue: Price,
    readonly lookupTable: web3.PublicKey
  ) {}

  /**
   * Creates a {@link BestLendUserAccount} instance from the provided args.
   */
  static fromArgs(args: BestLendUserAccountArgs) {
    return new BestLendUserAccount(
      args.owner,
      args.address,
      args.collateralGroup,
      args.debtGroup,
      args.blackListedAssets,
      args.priceImpactBps,
      args.lastAccountValue,
      args.lookupTable
    )
  }

  /**
   * Deserializes the {@link BestLendUserAccount} from the data of the provided {@link web3.AccountInfo}.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static fromAccountInfo(
    accountInfo: web3.AccountInfo<Buffer>,
    offset = 0
  ): [BestLendUserAccount, number] {
    return BestLendUserAccount.deserialize(accountInfo.data, offset)
  }

  /**
   * Retrieves the account info from the provided address and deserializes
   * the {@link BestLendUserAccount} from its data.
   *
   * @throws Error if no account info is found at the address or if deserialization fails
   */
  static async fromAccountAddress(
    connection: web3.Connection,
    address: web3.PublicKey,
    commitmentOrConfig?: web3.Commitment | web3.GetAccountInfoConfig
  ): Promise<BestLendUserAccount> {
    const accountInfo = await connection.getAccountInfo(
      address,
      commitmentOrConfig
    )
    if (accountInfo == null) {
      throw new Error(
        `Unable to find BestLendUserAccount account at ${address}`
      )
    }
    return BestLendUserAccount.fromAccountInfo(accountInfo, 0)[0]
  }

  /**
   * Provides a {@link web3.Connection.getProgramAccounts} config builder,
   * to fetch accounts matching filters that can be specified via that builder.
   *
   * @param programId - the program that owns the accounts we are filtering
   */
  static gpaBuilder(
    programId: web3.PublicKey = new web3.PublicKey(
      'hackF7pNZ7dGZCGXaiPNnzxkSoyrBkyEyDTpywK9KJs'
    )
  ) {
    return beetSolana.GpaBuilder.fromStruct(programId, bestLendUserAccountBeet)
  }

  /**
   * Deserializes the {@link BestLendUserAccount} from the provided data Buffer.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static deserialize(buf: Buffer, offset = 0): [BestLendUserAccount, number] {
    return bestLendUserAccountBeet.deserialize(buf, offset)
  }

  /**
   * Serializes the {@link BestLendUserAccount} into a Buffer.
   * @returns a tuple of the created Buffer and the offset up to which the buffer was written to store it.
   */
  serialize(): [Buffer, number] {
    return bestLendUserAccountBeet.serialize({
      accountDiscriminator: bestLendUserAccountDiscriminator,
      ...this,
    })
  }

  /**
   * Returns the byteSize of a {@link Buffer} holding the serialized data of
   * {@link BestLendUserAccount}
   */
  static get byteSize() {
    return bestLendUserAccountBeet.byteSize
  }

  /**
   * Fetches the minimum balance needed to exempt an account holding
   * {@link BestLendUserAccount} data from rent
   *
   * @param connection used to retrieve the rent exemption information
   */
  static async getMinimumBalanceForRentExemption(
    connection: web3.Connection,
    commitment?: web3.Commitment
  ): Promise<number> {
    return connection.getMinimumBalanceForRentExemption(
      BestLendUserAccount.byteSize,
      commitment
    )
  }

  /**
   * Determines if the provided {@link Buffer} has the correct byte size to
   * hold {@link BestLendUserAccount} data.
   */
  static hasCorrectByteSize(buf: Buffer, offset = 0) {
    return buf.byteLength - offset === BestLendUserAccount.byteSize
  }

  /**
   * Returns a readable version of {@link BestLendUserAccount} properties
   * and can be used to convert to JSON and/or logging
   */
  pretty() {
    return {
      owner: this.owner.toBase58(),
      address: this.address.toBase58(),
      collateralGroup: this.collateralGroup,
      debtGroup: this.debtGroup,
      blackListedAssets: this.blackListedAssets,
      priceImpactBps: this.priceImpactBps,
      lastAccountValue: this.lastAccountValue,
      lookupTable: this.lookupTable.toBase58(),
    }
  }
}

/**
 * @category Accounts
 * @category generated
 */
export const bestLendUserAccountBeet = new beet.BeetStruct<
  BestLendUserAccount,
  BestLendUserAccountArgs & {
    accountDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['accountDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['owner', beetSolana.publicKey],
    ['address', beetSolana.publicKey],
    ['collateralGroup', beet.u8],
    ['debtGroup', beet.u8],
    ['blackListedAssets', beet.uniformFixedSizeArray(beetSolana.publicKey, 5)],
    ['priceImpactBps', beet.u8],
    ['lastAccountValue', priceBeet],
    ['lookupTable', beetSolana.publicKey],
  ],
  BestLendUserAccount.fromArgs,
  'BestLendUserAccount'
)
