/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as splToken from '@solana/spl-token'
import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'

/**
 * @category Instructions
 * @category InitKlendAccount
 * @category generated
 */
export const initKlendAccountStruct = new beet.BeetArgsStruct<{
  instructionDiscriminator: number[] /* size: 8 */
}>(
  [['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)]],
  'InitKlendAccountInstructionArgs'
)
/**
 * Accounts required by the _initKlendAccount_ instruction
 *
 * @property [_writable_, **signer**] owner
 * @property [_writable_] bestlendUserAccount
 * @property [] klendProgram
 * @property [] seed1Account
 * @property [] seed2Account
 * @property [] lendingMarket
 * @property [_writable_] obligation
 * @property [_writable_] userMetadata
 * @category Instructions
 * @category InitKlendAccount
 * @category generated
 */
export type InitKlendAccountInstructionAccounts = {
  owner: web3.PublicKey
  bestlendUserAccount: web3.PublicKey
  systemProgram?: web3.PublicKey
  rent?: web3.PublicKey
  tokenProgram?: web3.PublicKey
  klendProgram: web3.PublicKey
  seed1Account: web3.PublicKey
  seed2Account: web3.PublicKey
  lendingMarket: web3.PublicKey
  obligation: web3.PublicKey
  userMetadata: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}

export const initKlendAccountInstructionDiscriminator = [
  209, 210, 226, 244, 156, 2, 81, 165,
]

/**
 * Creates a _InitKlendAccount_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @category Instructions
 * @category InitKlendAccount
 * @category generated
 */
export function createInitKlendAccountInstruction(
  accounts: InitKlendAccountInstructionAccounts,
  programId = new web3.PublicKey('hackF7pNZ7dGZCGXaiPNnzxkSoyrBkyEyDTpywK9KJs')
) {
  const [data] = initKlendAccountStruct.serialize({
    instructionDiscriminator: initKlendAccountInstructionDiscriminator,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.owner,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.bestlendUserAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.rent ?? web3.SYSVAR_RENT_PUBKEY,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenProgram ?? splToken.TOKEN_PROGRAM_ID,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.klendProgram,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.seed1Account,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.seed2Account,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.lendingMarket,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.obligation,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.userMetadata,
      isWritable: true,
      isSigner: false,
    },
  ]

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
