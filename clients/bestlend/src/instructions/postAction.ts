/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'

/**
 * @category Instructions
 * @category PostAction
 * @category generated
 */
export const postActionStruct = new beet.BeetArgsStruct<{
  instructionDiscriminator: number[] /* size: 8 */
}>(
  [['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)]],
  'PostActionInstructionArgs'
)
/**
 * Accounts required by the _postAction_ instruction
 *
 * @property [_writable_, **signer**] signer
 * @property [] bestlendUserAccount
 * @property [] klendObligation
 * @property [] instructions
 * @category Instructions
 * @category PostAction
 * @category generated
 */
export type PostActionInstructionAccounts = {
  signer: web3.PublicKey
  bestlendUserAccount: web3.PublicKey
  klendObligation: web3.PublicKey
  instructions: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}

export const postActionInstructionDiscriminator = [
  92, 135, 252, 82, 63, 144, 84, 78,
]

/**
 * Creates a _PostAction_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @category Instructions
 * @category PostAction
 * @category generated
 */
export function createPostActionInstruction(
  accounts: PostActionInstructionAccounts,
  programId = new web3.PublicKey('hackF7pNZ7dGZCGXaiPNnzxkSoyrBkyEyDTpywK9KJs')
) {
  const [data] = postActionStruct.serialize({
    instructionDiscriminator: postActionInstructionDiscriminator,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.signer,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.bestlendUserAccount,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.klendObligation,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.instructions,
      isWritable: false,
      isSigner: false,
    },
  ]

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
