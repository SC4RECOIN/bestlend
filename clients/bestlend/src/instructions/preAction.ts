/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'

/**
 * @category Instructions
 * @category PreAction
 * @category generated
 */
export type PreActionInstructionArgs = {
  minAccountValue: beet.bignum
  minAccountExpo: number
}
/**
 * @category Instructions
 * @category PreAction
 * @category generated
 */
export const preActionStruct = new beet.BeetArgsStruct<
  PreActionInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['minAccountValue', beet.i64],
    ['minAccountExpo', beet.u32],
  ],
  'PreActionInstructionArgs'
)
/**
 * Accounts required by the _preAction_ instruction
 *
 * @property [_writable_, **signer**] signer
 * @property [] bestlendUserAccount
 * @property [] klendObligation
 * @property [] instructions
 * @category Instructions
 * @category PreAction
 * @category generated
 */
export type PreActionInstructionAccounts = {
  signer: web3.PublicKey
  bestlendUserAccount: web3.PublicKey
  klendObligation: web3.PublicKey
  instructions: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}

export const preActionInstructionDiscriminator = [
  225, 20, 15, 58, 10, 110, 227, 59,
]

/**
 * Creates a _PreAction_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category PreAction
 * @category generated
 */
export function createPreActionInstruction(
  accounts: PreActionInstructionAccounts,
  args: PreActionInstructionArgs,
  programId = new web3.PublicKey('hackF7pNZ7dGZCGXaiPNnzxkSoyrBkyEyDTpywK9KJs')
) {
  const [data] = preActionStruct.serialize({
    instructionDiscriminator: preActionInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.signer,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.bestlendUserAccount,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.klendObligation,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.instructions,
      isWritable: false,
      isSigner: false,
    },
  ]

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
