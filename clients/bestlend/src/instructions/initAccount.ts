/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as web3 from '@solana/web3.js'
import * as beet from '@metaplex-foundation/beet'
import * as beetSolana from '@metaplex-foundation/beet-solana'

/**
 * @category Instructions
 * @category InitAccount
 * @category generated
 */
export type InitAccountInstructionArgs = {
  collateralGroup: number
  debtGroup: number
  lookupTable: web3.PublicKey
}
/**
 * @category Instructions
 * @category InitAccount
 * @category generated
 */
export const initAccountStruct = new beet.BeetArgsStruct<
  InitAccountInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['collateralGroup', beet.u8],
    ['debtGroup', beet.u8],
    ['lookupTable', beetSolana.publicKey],
  ],
  'InitAccountInstructionArgs'
)
/**
 * Accounts required by the _initAccount_ instruction
 *
 * @property [_writable_, **signer**] owner
 * @property [_writable_] bestlendUserAccount
 * @category Instructions
 * @category InitAccount
 * @category generated
 */
export type InitAccountInstructionAccounts = {
  owner: web3.PublicKey
  bestlendUserAccount: web3.PublicKey
  systemProgram?: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}

export const initAccountInstructionDiscriminator = [
  169, 188, 158, 199, 9, 151, 101, 125,
]

/**
 * Creates a _InitAccount_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category InitAccount
 * @category generated
 */
export function createInitAccountInstruction(
  accounts: InitAccountInstructionAccounts,
  args: InitAccountInstructionArgs,
  programId = new web3.PublicKey('hackF7pNZ7dGZCGXaiPNnzxkSoyrBkyEyDTpywK9KJs')
) {
  const [data] = initAccountStruct.serialize({
    instructionDiscriminator: initAccountInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.owner,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.bestlendUserAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
  ]

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
