/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'
import * as beetSolana from '@metaplex-foundation/beet-solana'
import { BorrowRateCurve, borrowRateCurveBeet } from './BorrowRateCurve'
import { ReserveConfig, reserveConfigBeet } from './ReserveConfig'
/**
 * This type is used to derive the {@link UpdateReserveConfigValue} type as well as the de/serializer.
 * However don't refer to it in your code but use the {@link UpdateReserveConfigValue} type instead.
 *
 * @category userTypes
 * @category enums
 * @category generated
 * @private
 */
export type UpdateReserveConfigValueRecord = {
  Bool: { fields: [boolean] }
  U8: { fields: [number] }
  U8Tuple: { fields: [number, number] }
  U16: { fields: [number] }
  U64: { fields: [beet.bignum] }
  Pubkey: { fields: [web3.PublicKey] }
  ScopeChain: { fields: [number[] /* size: 4 */] }
  Name: { fields: [number[] /* size: 32 */] }
  BorrowRateCurve: { fields: [BorrowRateCurve] }
  Full: { fields: [ReserveConfig] }
  WithdrawalCap: { fields: [beet.bignum, beet.bignum] }
  ElevationGroups: { fields: [number[] /* size: 20 */] }
}

/**
 * Union type respresenting the UpdateReserveConfigValue data enum defined in Rust.
 *
 * NOTE: that it includes a `__kind` property which allows to narrow types in
 * switch/if statements.
 * Additionally `isUpdateReserveConfigValue*` type guards are exposed below to narrow to a specific variant.
 *
 * @category userTypes
 * @category enums
 * @category generated
 */
export type UpdateReserveConfigValue =
  beet.DataEnumKeyAsKind<UpdateReserveConfigValueRecord>

export const isUpdateReserveConfigValueBool = (
  x: UpdateReserveConfigValue
): x is UpdateReserveConfigValue & { __kind: 'Bool' } => x.__kind === 'Bool'
export const isUpdateReserveConfigValueU8 = (
  x: UpdateReserveConfigValue
): x is UpdateReserveConfigValue & { __kind: 'U8' } => x.__kind === 'U8'
export const isUpdateReserveConfigValueU8Tuple = (
  x: UpdateReserveConfigValue
): x is UpdateReserveConfigValue & { __kind: 'U8Tuple' } =>
  x.__kind === 'U8Tuple'
export const isUpdateReserveConfigValueU16 = (
  x: UpdateReserveConfigValue
): x is UpdateReserveConfigValue & { __kind: 'U16' } => x.__kind === 'U16'
export const isUpdateReserveConfigValueU64 = (
  x: UpdateReserveConfigValue
): x is UpdateReserveConfigValue & { __kind: 'U64' } => x.__kind === 'U64'
export const isUpdateReserveConfigValuePubkey = (
  x: UpdateReserveConfigValue
): x is UpdateReserveConfigValue & { __kind: 'Pubkey' } => x.__kind === 'Pubkey'
export const isUpdateReserveConfigValueScopeChain = (
  x: UpdateReserveConfigValue
): x is UpdateReserveConfigValue & { __kind: 'ScopeChain' } =>
  x.__kind === 'ScopeChain'
export const isUpdateReserveConfigValueName = (
  x: UpdateReserveConfigValue
): x is UpdateReserveConfigValue & { __kind: 'Name' } => x.__kind === 'Name'
export const isUpdateReserveConfigValueBorrowRateCurve = (
  x: UpdateReserveConfigValue
): x is UpdateReserveConfigValue & { __kind: 'BorrowRateCurve' } =>
  x.__kind === 'BorrowRateCurve'
export const isUpdateReserveConfigValueFull = (
  x: UpdateReserveConfigValue
): x is UpdateReserveConfigValue & { __kind: 'Full' } => x.__kind === 'Full'
export const isUpdateReserveConfigValueWithdrawalCap = (
  x: UpdateReserveConfigValue
): x is UpdateReserveConfigValue & { __kind: 'WithdrawalCap' } =>
  x.__kind === 'WithdrawalCap'
export const isUpdateReserveConfigValueElevationGroups = (
  x: UpdateReserveConfigValue
): x is UpdateReserveConfigValue & { __kind: 'ElevationGroups' } =>
  x.__kind === 'ElevationGroups'

/**
 * @category userTypes
 * @category generated
 */
export const updateReserveConfigValueBeet =
  beet.dataEnum<UpdateReserveConfigValueRecord>([
    [
      'Bool',
      new beet.BeetArgsStruct<UpdateReserveConfigValueRecord['Bool']>(
        [['fields', beet.fixedSizeTuple([beet.bool])]],
        'UpdateReserveConfigValueRecord["Bool"]'
      ),
    ],
    [
      'U8',
      new beet.BeetArgsStruct<UpdateReserveConfigValueRecord['U8']>(
        [['fields', beet.fixedSizeTuple([beet.u8])]],
        'UpdateReserveConfigValueRecord["U8"]'
      ),
    ],
    [
      'U8Tuple',
      new beet.BeetArgsStruct<UpdateReserveConfigValueRecord['U8Tuple']>(
        [['fields', beet.fixedSizeTuple([beet.u8, beet.u8])]],
        'UpdateReserveConfigValueRecord["U8Tuple"]'
      ),
    ],
    [
      'U16',
      new beet.BeetArgsStruct<UpdateReserveConfigValueRecord['U16']>(
        [['fields', beet.fixedSizeTuple([beet.u16])]],
        'UpdateReserveConfigValueRecord["U16"]'
      ),
    ],
    [
      'U64',
      new beet.BeetArgsStruct<UpdateReserveConfigValueRecord['U64']>(
        [['fields', beet.fixedSizeTuple([beet.u64])]],
        'UpdateReserveConfigValueRecord["U64"]'
      ),
    ],
    [
      'Pubkey',
      new beet.BeetArgsStruct<UpdateReserveConfigValueRecord['Pubkey']>(
        [['fields', beet.fixedSizeTuple([beetSolana.publicKey])]],
        'UpdateReserveConfigValueRecord["Pubkey"]'
      ),
    ],
    [
      'ScopeChain',
      new beet.BeetArgsStruct<UpdateReserveConfigValueRecord['ScopeChain']>(
        [
          [
            'fields',
            beet.fixedSizeTuple([beet.uniformFixedSizeArray(beet.u16, 4)]),
          ],
        ],
        'UpdateReserveConfigValueRecord["ScopeChain"]'
      ),
    ],
    [
      'Name',
      new beet.BeetArgsStruct<UpdateReserveConfigValueRecord['Name']>(
        [
          [
            'fields',
            beet.fixedSizeTuple([beet.uniformFixedSizeArray(beet.u8, 32)]),
          ],
        ],
        'UpdateReserveConfigValueRecord["Name"]'
      ),
    ],
    [
      'BorrowRateCurve',
      new beet.BeetArgsStruct<
        UpdateReserveConfigValueRecord['BorrowRateCurve']
      >(
        [['fields', beet.fixedSizeTuple([borrowRateCurveBeet])]],
        'UpdateReserveConfigValueRecord["BorrowRateCurve"]'
      ),
    ],
    [
      'Full',
      new beet.BeetArgsStruct<UpdateReserveConfigValueRecord['Full']>(
        [['fields', beet.fixedSizeTuple([reserveConfigBeet])]],
        'UpdateReserveConfigValueRecord["Full"]'
      ),
    ],
    [
      'WithdrawalCap',
      new beet.BeetArgsStruct<UpdateReserveConfigValueRecord['WithdrawalCap']>(
        [['fields', beet.fixedSizeTuple([beet.u64, beet.u64])]],
        'UpdateReserveConfigValueRecord["WithdrawalCap"]'
      ),
    ],
    [
      'ElevationGroups',
      new beet.BeetArgsStruct<
        UpdateReserveConfigValueRecord['ElevationGroups']
      >(
        [
          [
            'fields',
            beet.fixedSizeTuple([beet.uniformFixedSizeArray(beet.u8, 20)]),
          ],
        ],
        'UpdateReserveConfigValueRecord["ElevationGroups"]'
      ),
    ],
  ]) as beet.FixableBeet<UpdateReserveConfigValue, UpdateReserveConfigValue>
