/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as web3 from '@solana/web3.js'
import * as beet from '@metaplex-foundation/beet'
import * as beetSolana from '@metaplex-foundation/beet-solana'
import { BigFractionBytes, bigFractionBytesBeet } from './BigFractionBytes'
export type ReserveLiquidity = {
  mintPubkey: web3.PublicKey
  supplyVault: web3.PublicKey
  feeVault: web3.PublicKey
  availableAmount: beet.bignum
  borrowedAmountSf: beet.bignum
  marketPriceSf: beet.bignum
  marketPriceLastUpdatedTs: beet.bignum
  mintDecimals: beet.bignum
  depositLimitCrossedSlot: beet.bignum
  borrowLimitCrossedSlot: beet.bignum
  cumulativeBorrowRateBsf: BigFractionBytes
  accumulatedProtocolFeesSf: beet.bignum
  accumulatedReferrerFeesSf: beet.bignum
  pendingReferrerFeesSf: beet.bignum
  absoluteReferralRateSf: beet.bignum
  padding2: beet.bignum[] /* size: 55 */
  padding3: beet.bignum[] /* size: 32 */
}

/**
 * @category userTypes
 * @category generated
 */
export const reserveLiquidityBeet = new beet.BeetArgsStruct<ReserveLiquidity>(
  [
    ['mintPubkey', beetSolana.publicKey],
    ['supplyVault', beetSolana.publicKey],
    ['feeVault', beetSolana.publicKey],
    ['availableAmount', beet.u64],
    ['borrowedAmountSf', beet.u128],
    ['marketPriceSf', beet.u128],
    ['marketPriceLastUpdatedTs', beet.u64],
    ['mintDecimals', beet.u64],
    ['depositLimitCrossedSlot', beet.u64],
    ['borrowLimitCrossedSlot', beet.u64],
    ['cumulativeBorrowRateBsf', bigFractionBytesBeet],
    ['accumulatedProtocolFeesSf', beet.u128],
    ['accumulatedReferrerFeesSf', beet.u128],
    ['pendingReferrerFeesSf', beet.u128],
    ['absoluteReferralRateSf', beet.u128],
    ['padding2', beet.uniformFixedSizeArray(beet.u64, 55)],
    ['padding3', beet.uniformFixedSizeArray(beet.u128, 32)],
  ],
  'ReserveLiquidity'
)
