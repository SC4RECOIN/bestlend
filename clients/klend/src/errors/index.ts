/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

type ErrorWithCode = Error & { code: number }
type MaybeErrorWithCode = ErrorWithCode | null | undefined

const createErrorFromCodeLookup: Map<number, () => ErrorWithCode> = new Map()
const createErrorFromNameLookup: Map<string, () => ErrorWithCode> = new Map()

/**
 * InvalidMarketAuthority: 'Market authority is invalid'
 *
 * @category Errors
 * @category generated
 */
export class InvalidMarketAuthorityError extends Error {
  readonly code: number = 0x1770
  readonly name: string = 'InvalidMarketAuthority'
  constructor() {
    super('Market authority is invalid')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidMarketAuthorityError)
    }
  }
}

createErrorFromCodeLookup.set(0x1770, () => new InvalidMarketAuthorityError())
createErrorFromNameLookup.set(
  'InvalidMarketAuthority',
  () => new InvalidMarketAuthorityError()
)

/**
 * InvalidMarketOwner: 'Market owner is invalid'
 *
 * @category Errors
 * @category generated
 */
export class InvalidMarketOwnerError extends Error {
  readonly code: number = 0x1771
  readonly name: string = 'InvalidMarketOwner'
  constructor() {
    super('Market owner is invalid')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidMarketOwnerError)
    }
  }
}

createErrorFromCodeLookup.set(0x1771, () => new InvalidMarketOwnerError())
createErrorFromNameLookup.set(
  'InvalidMarketOwner',
  () => new InvalidMarketOwnerError()
)

/**
 * InvalidAccountOwner: 'Input account owner is not the program address'
 *
 * @category Errors
 * @category generated
 */
export class InvalidAccountOwnerError extends Error {
  readonly code: number = 0x1772
  readonly name: string = 'InvalidAccountOwner'
  constructor() {
    super('Input account owner is not the program address')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidAccountOwnerError)
    }
  }
}

createErrorFromCodeLookup.set(0x1772, () => new InvalidAccountOwnerError())
createErrorFromNameLookup.set(
  'InvalidAccountOwner',
  () => new InvalidAccountOwnerError()
)

/**
 * InvalidAmount: 'Input amount is invalid'
 *
 * @category Errors
 * @category generated
 */
export class InvalidAmountError extends Error {
  readonly code: number = 0x1773
  readonly name: string = 'InvalidAmount'
  constructor() {
    super('Input amount is invalid')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidAmountError)
    }
  }
}

createErrorFromCodeLookup.set(0x1773, () => new InvalidAmountError())
createErrorFromNameLookup.set('InvalidAmount', () => new InvalidAmountError())

/**
 * InvalidConfig: 'Input config value is invalid'
 *
 * @category Errors
 * @category generated
 */
export class InvalidConfigError extends Error {
  readonly code: number = 0x1774
  readonly name: string = 'InvalidConfig'
  constructor() {
    super('Input config value is invalid')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidConfigError)
    }
  }
}

createErrorFromCodeLookup.set(0x1774, () => new InvalidConfigError())
createErrorFromNameLookup.set('InvalidConfig', () => new InvalidConfigError())

/**
 * InvalidSigner: 'Input account must be a signer'
 *
 * @category Errors
 * @category generated
 */
export class InvalidSignerError extends Error {
  readonly code: number = 0x1775
  readonly name: string = 'InvalidSigner'
  constructor() {
    super('Input account must be a signer')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidSignerError)
    }
  }
}

createErrorFromCodeLookup.set(0x1775, () => new InvalidSignerError())
createErrorFromNameLookup.set('InvalidSigner', () => new InvalidSignerError())

/**
 * InvalidAccountInput: 'Invalid account input'
 *
 * @category Errors
 * @category generated
 */
export class InvalidAccountInputError extends Error {
  readonly code: number = 0x1776
  readonly name: string = 'InvalidAccountInput'
  constructor() {
    super('Invalid account input')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidAccountInputError)
    }
  }
}

createErrorFromCodeLookup.set(0x1776, () => new InvalidAccountInputError())
createErrorFromNameLookup.set(
  'InvalidAccountInput',
  () => new InvalidAccountInputError()
)

/**
 * MathOverflow: 'Math operation overflow'
 *
 * @category Errors
 * @category generated
 */
export class MathOverflowError extends Error {
  readonly code: number = 0x1777
  readonly name: string = 'MathOverflow'
  constructor() {
    super('Math operation overflow')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, MathOverflowError)
    }
  }
}

createErrorFromCodeLookup.set(0x1777, () => new MathOverflowError())
createErrorFromNameLookup.set('MathOverflow', () => new MathOverflowError())

/**
 * InsufficientLiquidity: 'Insufficient liquidity available'
 *
 * @category Errors
 * @category generated
 */
export class InsufficientLiquidityError extends Error {
  readonly code: number = 0x1778
  readonly name: string = 'InsufficientLiquidity'
  constructor() {
    super('Insufficient liquidity available')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InsufficientLiquidityError)
    }
  }
}

createErrorFromCodeLookup.set(0x1778, () => new InsufficientLiquidityError())
createErrorFromNameLookup.set(
  'InsufficientLiquidity',
  () => new InsufficientLiquidityError()
)

/**
 * ReserveStale: 'Reserve state needs to be refreshed'
 *
 * @category Errors
 * @category generated
 */
export class ReserveStaleError extends Error {
  readonly code: number = 0x1779
  readonly name: string = 'ReserveStale'
  constructor() {
    super('Reserve state needs to be refreshed')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, ReserveStaleError)
    }
  }
}

createErrorFromCodeLookup.set(0x1779, () => new ReserveStaleError())
createErrorFromNameLookup.set('ReserveStale', () => new ReserveStaleError())

/**
 * WithdrawTooSmall: 'Withdraw amount too small'
 *
 * @category Errors
 * @category generated
 */
export class WithdrawTooSmallError extends Error {
  readonly code: number = 0x177a
  readonly name: string = 'WithdrawTooSmall'
  constructor() {
    super('Withdraw amount too small')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, WithdrawTooSmallError)
    }
  }
}

createErrorFromCodeLookup.set(0x177a, () => new WithdrawTooSmallError())
createErrorFromNameLookup.set(
  'WithdrawTooSmall',
  () => new WithdrawTooSmallError()
)

/**
 * WithdrawTooLarge: 'Withdraw amount too large'
 *
 * @category Errors
 * @category generated
 */
export class WithdrawTooLargeError extends Error {
  readonly code: number = 0x177b
  readonly name: string = 'WithdrawTooLarge'
  constructor() {
    super('Withdraw amount too large')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, WithdrawTooLargeError)
    }
  }
}

createErrorFromCodeLookup.set(0x177b, () => new WithdrawTooLargeError())
createErrorFromNameLookup.set(
  'WithdrawTooLarge',
  () => new WithdrawTooLargeError()
)

/**
 * BorrowTooSmall: 'Borrow amount too small to receive liquidity after fees'
 *
 * @category Errors
 * @category generated
 */
export class BorrowTooSmallError extends Error {
  readonly code: number = 0x177c
  readonly name: string = 'BorrowTooSmall'
  constructor() {
    super('Borrow amount too small to receive liquidity after fees')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, BorrowTooSmallError)
    }
  }
}

createErrorFromCodeLookup.set(0x177c, () => new BorrowTooSmallError())
createErrorFromNameLookup.set('BorrowTooSmall', () => new BorrowTooSmallError())

/**
 * BorrowTooLarge: 'Borrow amount too large for deposited collateral'
 *
 * @category Errors
 * @category generated
 */
export class BorrowTooLargeError extends Error {
  readonly code: number = 0x177d
  readonly name: string = 'BorrowTooLarge'
  constructor() {
    super('Borrow amount too large for deposited collateral')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, BorrowTooLargeError)
    }
  }
}

createErrorFromCodeLookup.set(0x177d, () => new BorrowTooLargeError())
createErrorFromNameLookup.set('BorrowTooLarge', () => new BorrowTooLargeError())

/**
 * RepayTooSmall: 'Repay amount too small to transfer liquidity'
 *
 * @category Errors
 * @category generated
 */
export class RepayTooSmallError extends Error {
  readonly code: number = 0x177e
  readonly name: string = 'RepayTooSmall'
  constructor() {
    super('Repay amount too small to transfer liquidity')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, RepayTooSmallError)
    }
  }
}

createErrorFromCodeLookup.set(0x177e, () => new RepayTooSmallError())
createErrorFromNameLookup.set('RepayTooSmall', () => new RepayTooSmallError())

/**
 * LiquidationTooSmall: 'Liquidation amount too small to receive collateral'
 *
 * @category Errors
 * @category generated
 */
export class LiquidationTooSmallError extends Error {
  readonly code: number = 0x177f
  readonly name: string = 'LiquidationTooSmall'
  constructor() {
    super('Liquidation amount too small to receive collateral')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, LiquidationTooSmallError)
    }
  }
}

createErrorFromCodeLookup.set(0x177f, () => new LiquidationTooSmallError())
createErrorFromNameLookup.set(
  'LiquidationTooSmall',
  () => new LiquidationTooSmallError()
)

/**
 * ObligationHealthy: 'Cannot liquidate healthy obligations'
 *
 * @category Errors
 * @category generated
 */
export class ObligationHealthyError extends Error {
  readonly code: number = 0x1780
  readonly name: string = 'ObligationHealthy'
  constructor() {
    super('Cannot liquidate healthy obligations')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, ObligationHealthyError)
    }
  }
}

createErrorFromCodeLookup.set(0x1780, () => new ObligationHealthyError())
createErrorFromNameLookup.set(
  'ObligationHealthy',
  () => new ObligationHealthyError()
)

/**
 * ObligationStale: 'Obligation state needs to be refreshed'
 *
 * @category Errors
 * @category generated
 */
export class ObligationStaleError extends Error {
  readonly code: number = 0x1781
  readonly name: string = 'ObligationStale'
  constructor() {
    super('Obligation state needs to be refreshed')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, ObligationStaleError)
    }
  }
}

createErrorFromCodeLookup.set(0x1781, () => new ObligationStaleError())
createErrorFromNameLookup.set(
  'ObligationStale',
  () => new ObligationStaleError()
)

/**
 * ObligationReserveLimit: 'Obligation reserve limit exceeded'
 *
 * @category Errors
 * @category generated
 */
export class ObligationReserveLimitError extends Error {
  readonly code: number = 0x1782
  readonly name: string = 'ObligationReserveLimit'
  constructor() {
    super('Obligation reserve limit exceeded')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, ObligationReserveLimitError)
    }
  }
}

createErrorFromCodeLookup.set(0x1782, () => new ObligationReserveLimitError())
createErrorFromNameLookup.set(
  'ObligationReserveLimit',
  () => new ObligationReserveLimitError()
)

/**
 * InvalidObligationOwner: 'Obligation owner is invalid'
 *
 * @category Errors
 * @category generated
 */
export class InvalidObligationOwnerError extends Error {
  readonly code: number = 0x1783
  readonly name: string = 'InvalidObligationOwner'
  constructor() {
    super('Obligation owner is invalid')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidObligationOwnerError)
    }
  }
}

createErrorFromCodeLookup.set(0x1783, () => new InvalidObligationOwnerError())
createErrorFromNameLookup.set(
  'InvalidObligationOwner',
  () => new InvalidObligationOwnerError()
)

/**
 * ObligationDepositsEmpty: 'Obligation deposits are empty'
 *
 * @category Errors
 * @category generated
 */
export class ObligationDepositsEmptyError extends Error {
  readonly code: number = 0x1784
  readonly name: string = 'ObligationDepositsEmpty'
  constructor() {
    super('Obligation deposits are empty')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, ObligationDepositsEmptyError)
    }
  }
}

createErrorFromCodeLookup.set(0x1784, () => new ObligationDepositsEmptyError())
createErrorFromNameLookup.set(
  'ObligationDepositsEmpty',
  () => new ObligationDepositsEmptyError()
)

/**
 * ObligationBorrowsEmpty: 'Obligation borrows are empty'
 *
 * @category Errors
 * @category generated
 */
export class ObligationBorrowsEmptyError extends Error {
  readonly code: number = 0x1785
  readonly name: string = 'ObligationBorrowsEmpty'
  constructor() {
    super('Obligation borrows are empty')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, ObligationBorrowsEmptyError)
    }
  }
}

createErrorFromCodeLookup.set(0x1785, () => new ObligationBorrowsEmptyError())
createErrorFromNameLookup.set(
  'ObligationBorrowsEmpty',
  () => new ObligationBorrowsEmptyError()
)

/**
 * ObligationDepositsZero: 'Obligation deposits have zero value'
 *
 * @category Errors
 * @category generated
 */
export class ObligationDepositsZeroError extends Error {
  readonly code: number = 0x1786
  readonly name: string = 'ObligationDepositsZero'
  constructor() {
    super('Obligation deposits have zero value')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, ObligationDepositsZeroError)
    }
  }
}

createErrorFromCodeLookup.set(0x1786, () => new ObligationDepositsZeroError())
createErrorFromNameLookup.set(
  'ObligationDepositsZero',
  () => new ObligationDepositsZeroError()
)

/**
 * ObligationBorrowsZero: 'Obligation borrows have zero value'
 *
 * @category Errors
 * @category generated
 */
export class ObligationBorrowsZeroError extends Error {
  readonly code: number = 0x1787
  readonly name: string = 'ObligationBorrowsZero'
  constructor() {
    super('Obligation borrows have zero value')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, ObligationBorrowsZeroError)
    }
  }
}

createErrorFromCodeLookup.set(0x1787, () => new ObligationBorrowsZeroError())
createErrorFromNameLookup.set(
  'ObligationBorrowsZero',
  () => new ObligationBorrowsZeroError()
)

/**
 * InvalidObligationCollateral: 'Invalid obligation collateral'
 *
 * @category Errors
 * @category generated
 */
export class InvalidObligationCollateralError extends Error {
  readonly code: number = 0x1788
  readonly name: string = 'InvalidObligationCollateral'
  constructor() {
    super('Invalid obligation collateral')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidObligationCollateralError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x1788,
  () => new InvalidObligationCollateralError()
)
createErrorFromNameLookup.set(
  'InvalidObligationCollateral',
  () => new InvalidObligationCollateralError()
)

/**
 * InvalidObligationLiquidity: 'Invalid obligation liquidity'
 *
 * @category Errors
 * @category generated
 */
export class InvalidObligationLiquidityError extends Error {
  readonly code: number = 0x1789
  readonly name: string = 'InvalidObligationLiquidity'
  constructor() {
    super('Invalid obligation liquidity')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidObligationLiquidityError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x1789,
  () => new InvalidObligationLiquidityError()
)
createErrorFromNameLookup.set(
  'InvalidObligationLiquidity',
  () => new InvalidObligationLiquidityError()
)

/**
 * ObligationCollateralEmpty: 'Obligation collateral is empty'
 *
 * @category Errors
 * @category generated
 */
export class ObligationCollateralEmptyError extends Error {
  readonly code: number = 0x178a
  readonly name: string = 'ObligationCollateralEmpty'
  constructor() {
    super('Obligation collateral is empty')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, ObligationCollateralEmptyError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x178a,
  () => new ObligationCollateralEmptyError()
)
createErrorFromNameLookup.set(
  'ObligationCollateralEmpty',
  () => new ObligationCollateralEmptyError()
)

/**
 * ObligationLiquidityEmpty: 'Obligation liquidity is empty'
 *
 * @category Errors
 * @category generated
 */
export class ObligationLiquidityEmptyError extends Error {
  readonly code: number = 0x178b
  readonly name: string = 'ObligationLiquidityEmpty'
  constructor() {
    super('Obligation liquidity is empty')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, ObligationLiquidityEmptyError)
    }
  }
}

createErrorFromCodeLookup.set(0x178b, () => new ObligationLiquidityEmptyError())
createErrorFromNameLookup.set(
  'ObligationLiquidityEmpty',
  () => new ObligationLiquidityEmptyError()
)

/**
 * NegativeInterestRate: 'Interest rate is negative'
 *
 * @category Errors
 * @category generated
 */
export class NegativeInterestRateError extends Error {
  readonly code: number = 0x178c
  readonly name: string = 'NegativeInterestRate'
  constructor() {
    super('Interest rate is negative')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, NegativeInterestRateError)
    }
  }
}

createErrorFromCodeLookup.set(0x178c, () => new NegativeInterestRateError())
createErrorFromNameLookup.set(
  'NegativeInterestRate',
  () => new NegativeInterestRateError()
)

/**
 * InvalidOracleConfig: 'Input oracle config is invalid'
 *
 * @category Errors
 * @category generated
 */
export class InvalidOracleConfigError extends Error {
  readonly code: number = 0x178d
  readonly name: string = 'InvalidOracleConfig'
  constructor() {
    super('Input oracle config is invalid')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidOracleConfigError)
    }
  }
}

createErrorFromCodeLookup.set(0x178d, () => new InvalidOracleConfigError())
createErrorFromNameLookup.set(
  'InvalidOracleConfig',
  () => new InvalidOracleConfigError()
)

/**
 * InsufficientProtocolFeesToRedeem: 'Insufficient protocol fees to claim or no liquidity available'
 *
 * @category Errors
 * @category generated
 */
export class InsufficientProtocolFeesToRedeemError extends Error {
  readonly code: number = 0x178e
  readonly name: string = 'InsufficientProtocolFeesToRedeem'
  constructor() {
    super('Insufficient protocol fees to claim or no liquidity available')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InsufficientProtocolFeesToRedeemError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x178e,
  () => new InsufficientProtocolFeesToRedeemError()
)
createErrorFromNameLookup.set(
  'InsufficientProtocolFeesToRedeem',
  () => new InsufficientProtocolFeesToRedeemError()
)

/**
 * FlashBorrowCpi: 'No cpi flash borrows allowed'
 *
 * @category Errors
 * @category generated
 */
export class FlashBorrowCpiError extends Error {
  readonly code: number = 0x178f
  readonly name: string = 'FlashBorrowCpi'
  constructor() {
    super('No cpi flash borrows allowed')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, FlashBorrowCpiError)
    }
  }
}

createErrorFromCodeLookup.set(0x178f, () => new FlashBorrowCpiError())
createErrorFromNameLookup.set('FlashBorrowCpi', () => new FlashBorrowCpiError())

/**
 * NoFlashRepayFound: 'No corresponding repay found for flash borrow'
 *
 * @category Errors
 * @category generated
 */
export class NoFlashRepayFoundError extends Error {
  readonly code: number = 0x1790
  readonly name: string = 'NoFlashRepayFound'
  constructor() {
    super('No corresponding repay found for flash borrow')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, NoFlashRepayFoundError)
    }
  }
}

createErrorFromCodeLookup.set(0x1790, () => new NoFlashRepayFoundError())
createErrorFromNameLookup.set(
  'NoFlashRepayFound',
  () => new NoFlashRepayFoundError()
)

/**
 * InvalidFlashRepay: 'Invalid repay found'
 *
 * @category Errors
 * @category generated
 */
export class InvalidFlashRepayError extends Error {
  readonly code: number = 0x1791
  readonly name: string = 'InvalidFlashRepay'
  constructor() {
    super('Invalid repay found')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidFlashRepayError)
    }
  }
}

createErrorFromCodeLookup.set(0x1791, () => new InvalidFlashRepayError())
createErrorFromNameLookup.set(
  'InvalidFlashRepay',
  () => new InvalidFlashRepayError()
)

/**
 * FlashRepayCpi: 'No cpi flash repays allowed'
 *
 * @category Errors
 * @category generated
 */
export class FlashRepayCpiError extends Error {
  readonly code: number = 0x1792
  readonly name: string = 'FlashRepayCpi'
  constructor() {
    super('No cpi flash repays allowed')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, FlashRepayCpiError)
    }
  }
}

createErrorFromCodeLookup.set(0x1792, () => new FlashRepayCpiError())
createErrorFromNameLookup.set('FlashRepayCpi', () => new FlashRepayCpiError())

/**
 * MultipleFlashBorrows: 'Multiple flash borrows not allowed in the same transaction'
 *
 * @category Errors
 * @category generated
 */
export class MultipleFlashBorrowsError extends Error {
  readonly code: number = 0x1793
  readonly name: string = 'MultipleFlashBorrows'
  constructor() {
    super('Multiple flash borrows not allowed in the same transaction')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, MultipleFlashBorrowsError)
    }
  }
}

createErrorFromCodeLookup.set(0x1793, () => new MultipleFlashBorrowsError())
createErrorFromNameLookup.set(
  'MultipleFlashBorrows',
  () => new MultipleFlashBorrowsError()
)

/**
 * FlashLoansDisabled: 'Flash loans are disabled for this reserve'
 *
 * @category Errors
 * @category generated
 */
export class FlashLoansDisabledError extends Error {
  readonly code: number = 0x1794
  readonly name: string = 'FlashLoansDisabled'
  constructor() {
    super('Flash loans are disabled for this reserve')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, FlashLoansDisabledError)
    }
  }
}

createErrorFromCodeLookup.set(0x1794, () => new FlashLoansDisabledError())
createErrorFromNameLookup.set(
  'FlashLoansDisabled',
  () => new FlashLoansDisabledError()
)

/**
 * SwitchboardV2Error: 'Switchboard error'
 *
 * @category Errors
 * @category generated
 */
export class SwitchboardV2ErrorError extends Error {
  readonly code: number = 0x1795
  readonly name: string = 'SwitchboardV2Error'
  constructor() {
    super('Switchboard error')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, SwitchboardV2ErrorError)
    }
  }
}

createErrorFromCodeLookup.set(0x1795, () => new SwitchboardV2ErrorError())
createErrorFromNameLookup.set(
  'SwitchboardV2Error',
  () => new SwitchboardV2ErrorError()
)

/**
 * CouldNotDeserializeScope: 'Cannot deserialize the scope price account'
 *
 * @category Errors
 * @category generated
 */
export class CouldNotDeserializeScopeError extends Error {
  readonly code: number = 0x1796
  readonly name: string = 'CouldNotDeserializeScope'
  constructor() {
    super('Cannot deserialize the scope price account')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, CouldNotDeserializeScopeError)
    }
  }
}

createErrorFromCodeLookup.set(0x1796, () => new CouldNotDeserializeScopeError())
createErrorFromNameLookup.set(
  'CouldNotDeserializeScope',
  () => new CouldNotDeserializeScopeError()
)

/**
 * PriceTooOld: 'Price too old'
 *
 * @category Errors
 * @category generated
 */
export class PriceTooOldError extends Error {
  readonly code: number = 0x1797
  readonly name: string = 'PriceTooOld'
  constructor() {
    super('Price too old')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, PriceTooOldError)
    }
  }
}

createErrorFromCodeLookup.set(0x1797, () => new PriceTooOldError())
createErrorFromNameLookup.set('PriceTooOld', () => new PriceTooOldError())

/**
 * PriceTooDivergentFromTwap: 'Price too divergent from twap'
 *
 * @category Errors
 * @category generated
 */
export class PriceTooDivergentFromTwapError extends Error {
  readonly code: number = 0x1798
  readonly name: string = 'PriceTooDivergentFromTwap'
  constructor() {
    super('Price too divergent from twap')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, PriceTooDivergentFromTwapError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x1798,
  () => new PriceTooDivergentFromTwapError()
)
createErrorFromNameLookup.set(
  'PriceTooDivergentFromTwap',
  () => new PriceTooDivergentFromTwapError()
)

/**
 * InvalidTwapPrice: 'Invalid twap price'
 *
 * @category Errors
 * @category generated
 */
export class InvalidTwapPriceError extends Error {
  readonly code: number = 0x1799
  readonly name: string = 'InvalidTwapPrice'
  constructor() {
    super('Invalid twap price')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidTwapPriceError)
    }
  }
}

createErrorFromCodeLookup.set(0x1799, () => new InvalidTwapPriceError())
createErrorFromNameLookup.set(
  'InvalidTwapPrice',
  () => new InvalidTwapPriceError()
)

/**
 * GlobalEmergencyMode: 'Emergency mode is enabled'
 *
 * @category Errors
 * @category generated
 */
export class GlobalEmergencyModeError extends Error {
  readonly code: number = 0x179a
  readonly name: string = 'GlobalEmergencyMode'
  constructor() {
    super('Emergency mode is enabled')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, GlobalEmergencyModeError)
    }
  }
}

createErrorFromCodeLookup.set(0x179a, () => new GlobalEmergencyModeError())
createErrorFromNameLookup.set(
  'GlobalEmergencyMode',
  () => new GlobalEmergencyModeError()
)

/**
 * InvalidFlag: 'Invalid lending market config'
 *
 * @category Errors
 * @category generated
 */
export class InvalidFlagError extends Error {
  readonly code: number = 0x179b
  readonly name: string = 'InvalidFlag'
  constructor() {
    super('Invalid lending market config')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidFlagError)
    }
  }
}

createErrorFromCodeLookup.set(0x179b, () => new InvalidFlagError())
createErrorFromNameLookup.set('InvalidFlag', () => new InvalidFlagError())

/**
 * PriceNotValid: 'Price is not valid'
 *
 * @category Errors
 * @category generated
 */
export class PriceNotValidError extends Error {
  readonly code: number = 0x179c
  readonly name: string = 'PriceNotValid'
  constructor() {
    super('Price is not valid')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, PriceNotValidError)
    }
  }
}

createErrorFromCodeLookup.set(0x179c, () => new PriceNotValidError())
createErrorFromNameLookup.set('PriceNotValid', () => new PriceNotValidError())

/**
 * PriceIsBiggerThanHeuristic: 'Price is bigger than allowed by heuristic'
 *
 * @category Errors
 * @category generated
 */
export class PriceIsBiggerThanHeuristicError extends Error {
  readonly code: number = 0x179d
  readonly name: string = 'PriceIsBiggerThanHeuristic'
  constructor() {
    super('Price is bigger than allowed by heuristic')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, PriceIsBiggerThanHeuristicError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x179d,
  () => new PriceIsBiggerThanHeuristicError()
)
createErrorFromNameLookup.set(
  'PriceIsBiggerThanHeuristic',
  () => new PriceIsBiggerThanHeuristicError()
)

/**
 * PriceIsLowerThanHeuristic: 'Price lower than allowed by heuristic'
 *
 * @category Errors
 * @category generated
 */
export class PriceIsLowerThanHeuristicError extends Error {
  readonly code: number = 0x179e
  readonly name: string = 'PriceIsLowerThanHeuristic'
  constructor() {
    super('Price lower than allowed by heuristic')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, PriceIsLowerThanHeuristicError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x179e,
  () => new PriceIsLowerThanHeuristicError()
)
createErrorFromNameLookup.set(
  'PriceIsLowerThanHeuristic',
  () => new PriceIsLowerThanHeuristicError()
)

/**
 * PriceIsZero: 'Price is zero'
 *
 * @category Errors
 * @category generated
 */
export class PriceIsZeroError extends Error {
  readonly code: number = 0x179f
  readonly name: string = 'PriceIsZero'
  constructor() {
    super('Price is zero')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, PriceIsZeroError)
    }
  }
}

createErrorFromCodeLookup.set(0x179f, () => new PriceIsZeroError())
createErrorFromNameLookup.set('PriceIsZero', () => new PriceIsZeroError())

/**
 * PriceConfidenceTooWide: 'Price confidence too wide'
 *
 * @category Errors
 * @category generated
 */
export class PriceConfidenceTooWideError extends Error {
  readonly code: number = 0x17a0
  readonly name: string = 'PriceConfidenceTooWide'
  constructor() {
    super('Price confidence too wide')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, PriceConfidenceTooWideError)
    }
  }
}

createErrorFromCodeLookup.set(0x17a0, () => new PriceConfidenceTooWideError())
createErrorFromNameLookup.set(
  'PriceConfidenceTooWide',
  () => new PriceConfidenceTooWideError()
)

/**
 * IntegerOverflow: 'Conversion between integers failed'
 *
 * @category Errors
 * @category generated
 */
export class IntegerOverflowError extends Error {
  readonly code: number = 0x17a1
  readonly name: string = 'IntegerOverflow'
  constructor() {
    super('Conversion between integers failed')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, IntegerOverflowError)
    }
  }
}

createErrorFromCodeLookup.set(0x17a1, () => new IntegerOverflowError())
createErrorFromNameLookup.set(
  'IntegerOverflow',
  () => new IntegerOverflowError()
)

/**
 * NoFarmForReserve: 'This reserve does not have a farm'
 *
 * @category Errors
 * @category generated
 */
export class NoFarmForReserveError extends Error {
  readonly code: number = 0x17a2
  readonly name: string = 'NoFarmForReserve'
  constructor() {
    super('This reserve does not have a farm')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, NoFarmForReserveError)
    }
  }
}

createErrorFromCodeLookup.set(0x17a2, () => new NoFarmForReserveError())
createErrorFromNameLookup.set(
  'NoFarmForReserve',
  () => new NoFarmForReserveError()
)

/**
 * IncorrectInstructionInPosition: 'Wrong instruction at expected position'
 *
 * @category Errors
 * @category generated
 */
export class IncorrectInstructionInPositionError extends Error {
  readonly code: number = 0x17a3
  readonly name: string = 'IncorrectInstructionInPosition'
  constructor() {
    super('Wrong instruction at expected position')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, IncorrectInstructionInPositionError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x17a3,
  () => new IncorrectInstructionInPositionError()
)
createErrorFromNameLookup.set(
  'IncorrectInstructionInPosition',
  () => new IncorrectInstructionInPositionError()
)

/**
 * NoPriceFound: 'No price found'
 *
 * @category Errors
 * @category generated
 */
export class NoPriceFoundError extends Error {
  readonly code: number = 0x17a4
  readonly name: string = 'NoPriceFound'
  constructor() {
    super('No price found')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, NoPriceFoundError)
    }
  }
}

createErrorFromCodeLookup.set(0x17a4, () => new NoPriceFoundError())
createErrorFromNameLookup.set('NoPriceFound', () => new NoPriceFoundError())

/**
 * InvalidTwapConfig: 'Invalid Twap configuration: Twap is enabled but one of the enabled price doesn't have a twap'
 *
 * @category Errors
 * @category generated
 */
export class InvalidTwapConfigError extends Error {
  readonly code: number = 0x17a5
  readonly name: string = 'InvalidTwapConfig'
  constructor() {
    super(
      "Invalid Twap configuration: Twap is enabled but one of the enabled price doesn't have a twap"
    )
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidTwapConfigError)
    }
  }
}

createErrorFromCodeLookup.set(0x17a5, () => new InvalidTwapConfigError())
createErrorFromNameLookup.set(
  'InvalidTwapConfig',
  () => new InvalidTwapConfigError()
)

/**
 * InvalidPythPriceAccount: 'Pyth price account does not match configuration'
 *
 * @category Errors
 * @category generated
 */
export class InvalidPythPriceAccountError extends Error {
  readonly code: number = 0x17a6
  readonly name: string = 'InvalidPythPriceAccount'
  constructor() {
    super('Pyth price account does not match configuration')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidPythPriceAccountError)
    }
  }
}

createErrorFromCodeLookup.set(0x17a6, () => new InvalidPythPriceAccountError())
createErrorFromNameLookup.set(
  'InvalidPythPriceAccount',
  () => new InvalidPythPriceAccountError()
)

/**
 * InvalidSwitchboardAccount: 'Switchboard account(s) do not match configuration'
 *
 * @category Errors
 * @category generated
 */
export class InvalidSwitchboardAccountError extends Error {
  readonly code: number = 0x17a7
  readonly name: string = 'InvalidSwitchboardAccount'
  constructor() {
    super('Switchboard account(s) do not match configuration')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidSwitchboardAccountError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x17a7,
  () => new InvalidSwitchboardAccountError()
)
createErrorFromNameLookup.set(
  'InvalidSwitchboardAccount',
  () => new InvalidSwitchboardAccountError()
)

/**
 * InvalidScopePriceAccount: 'Scope price account does not match configuration'
 *
 * @category Errors
 * @category generated
 */
export class InvalidScopePriceAccountError extends Error {
  readonly code: number = 0x17a8
  readonly name: string = 'InvalidScopePriceAccount'
  constructor() {
    super('Scope price account does not match configuration')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidScopePriceAccountError)
    }
  }
}

createErrorFromCodeLookup.set(0x17a8, () => new InvalidScopePriceAccountError())
createErrorFromNameLookup.set(
  'InvalidScopePriceAccount',
  () => new InvalidScopePriceAccountError()
)

/**
 * ObligationCollateralLtvZero: 'The obligation has one collateral with an LTV set to 0. Withdraw it before withdrawing other collaterals'
 *
 * @category Errors
 * @category generated
 */
export class ObligationCollateralLtvZeroError extends Error {
  readonly code: number = 0x17a9
  readonly name: string = 'ObligationCollateralLtvZero'
  constructor() {
    super(
      'The obligation has one collateral with an LTV set to 0. Withdraw it before withdrawing other collaterals'
    )
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, ObligationCollateralLtvZeroError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x17a9,
  () => new ObligationCollateralLtvZeroError()
)
createErrorFromNameLookup.set(
  'ObligationCollateralLtvZero',
  () => new ObligationCollateralLtvZeroError()
)

/**
 * InvalidObligationSeedsValue: 'Seeds must be default pubkeys for tag 0, and mint addresses for tag 1 or 2'
 *
 * @category Errors
 * @category generated
 */
export class InvalidObligationSeedsValueError extends Error {
  readonly code: number = 0x17aa
  readonly name: string = 'InvalidObligationSeedsValue'
  constructor() {
    super(
      'Seeds must be default pubkeys for tag 0, and mint addresses for tag 1 or 2'
    )
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidObligationSeedsValueError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x17aa,
  () => new InvalidObligationSeedsValueError()
)
createErrorFromNameLookup.set(
  'InvalidObligationSeedsValue',
  () => new InvalidObligationSeedsValueError()
)

/**
 * InvalidObligationId: 'Obligation id must be 0'
 *
 * @category Errors
 * @category generated
 */
export class InvalidObligationIdError extends Error {
  readonly code: number = 0x17ab
  readonly name: string = 'InvalidObligationId'
  constructor() {
    super('Obligation id must be 0')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidObligationIdError)
    }
  }
}

createErrorFromCodeLookup.set(0x17ab, () => new InvalidObligationIdError())
createErrorFromNameLookup.set(
  'InvalidObligationId',
  () => new InvalidObligationIdError()
)

/**
 * InvalidBorrowRateCurvePoint: 'Invalid borrow rate curve point'
 *
 * @category Errors
 * @category generated
 */
export class InvalidBorrowRateCurvePointError extends Error {
  readonly code: number = 0x17ac
  readonly name: string = 'InvalidBorrowRateCurvePoint'
  constructor() {
    super('Invalid borrow rate curve point')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidBorrowRateCurvePointError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x17ac,
  () => new InvalidBorrowRateCurvePointError()
)
createErrorFromNameLookup.set(
  'InvalidBorrowRateCurvePoint',
  () => new InvalidBorrowRateCurvePointError()
)

/**
 * InvalidUtilizationRate: 'Invalid utilization rate'
 *
 * @category Errors
 * @category generated
 */
export class InvalidUtilizationRateError extends Error {
  readonly code: number = 0x17ad
  readonly name: string = 'InvalidUtilizationRate'
  constructor() {
    super('Invalid utilization rate')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidUtilizationRateError)
    }
  }
}

createErrorFromCodeLookup.set(0x17ad, () => new InvalidUtilizationRateError())
createErrorFromNameLookup.set(
  'InvalidUtilizationRate',
  () => new InvalidUtilizationRateError()
)

/**
 * CannotSocializeObligationWithCollateral: 'Obligation hasn't been fully liquidated and debt cannot be socialized.'
 *
 * @category Errors
 * @category generated
 */
export class CannotSocializeObligationWithCollateralError extends Error {
  readonly code: number = 0x17ae
  readonly name: string = 'CannotSocializeObligationWithCollateral'
  constructor() {
    super(
      "Obligation hasn't been fully liquidated and debt cannot be socialized."
    )
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(
        this,
        CannotSocializeObligationWithCollateralError
      )
    }
  }
}

createErrorFromCodeLookup.set(
  0x17ae,
  () => new CannotSocializeObligationWithCollateralError()
)
createErrorFromNameLookup.set(
  'CannotSocializeObligationWithCollateral',
  () => new CannotSocializeObligationWithCollateralError()
)

/**
 * ObligationEmpty: 'Obligation has no borrows or deposits.'
 *
 * @category Errors
 * @category generated
 */
export class ObligationEmptyError extends Error {
  readonly code: number = 0x17af
  readonly name: string = 'ObligationEmpty'
  constructor() {
    super('Obligation has no borrows or deposits.')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, ObligationEmptyError)
    }
  }
}

createErrorFromCodeLookup.set(0x17af, () => new ObligationEmptyError())
createErrorFromNameLookup.set(
  'ObligationEmpty',
  () => new ObligationEmptyError()
)

/**
 * WithdrawalCapReached: 'Withdrawal cap is reached'
 *
 * @category Errors
 * @category generated
 */
export class WithdrawalCapReachedError extends Error {
  readonly code: number = 0x17b0
  readonly name: string = 'WithdrawalCapReached'
  constructor() {
    super('Withdrawal cap is reached')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, WithdrawalCapReachedError)
    }
  }
}

createErrorFromCodeLookup.set(0x17b0, () => new WithdrawalCapReachedError())
createErrorFromNameLookup.set(
  'WithdrawalCapReached',
  () => new WithdrawalCapReachedError()
)

/**
 * LastTimestampGreaterThanCurrent: 'The last interval start timestamp is greater than the current timestamp'
 *
 * @category Errors
 * @category generated
 */
export class LastTimestampGreaterThanCurrentError extends Error {
  readonly code: number = 0x17b1
  readonly name: string = 'LastTimestampGreaterThanCurrent'
  constructor() {
    super(
      'The last interval start timestamp is greater than the current timestamp'
    )
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, LastTimestampGreaterThanCurrentError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x17b1,
  () => new LastTimestampGreaterThanCurrentError()
)
createErrorFromNameLookup.set(
  'LastTimestampGreaterThanCurrent',
  () => new LastTimestampGreaterThanCurrentError()
)

/**
 * LiquidationSlippageError: 'The reward amount is less than the minimum acceptable received collateral'
 *
 * @category Errors
 * @category generated
 */
export class LiquidationSlippageErrorError extends Error {
  readonly code: number = 0x17b2
  readonly name: string = 'LiquidationSlippageError'
  constructor() {
    super(
      'The reward amount is less than the minimum acceptable received collateral'
    )
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, LiquidationSlippageErrorError)
    }
  }
}

createErrorFromCodeLookup.set(0x17b2, () => new LiquidationSlippageErrorError())
createErrorFromNameLookup.set(
  'LiquidationSlippageError',
  () => new LiquidationSlippageErrorError()
)

/**
 * IsolatedAssetTierViolation: 'Isolated Asset Tier Violation'
 *
 * @category Errors
 * @category generated
 */
export class IsolatedAssetTierViolationError extends Error {
  readonly code: number = 0x17b3
  readonly name: string = 'IsolatedAssetTierViolation'
  constructor() {
    super('Isolated Asset Tier Violation')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, IsolatedAssetTierViolationError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x17b3,
  () => new IsolatedAssetTierViolationError()
)
createErrorFromNameLookup.set(
  'IsolatedAssetTierViolation',
  () => new IsolatedAssetTierViolationError()
)

/**
 * InconsistentElevationGroup: 'The obligation's elevation group and the reserve's are not the same'
 *
 * @category Errors
 * @category generated
 */
export class InconsistentElevationGroupError extends Error {
  readonly code: number = 0x17b4
  readonly name: string = 'InconsistentElevationGroup'
  constructor() {
    super("The obligation's elevation group and the reserve's are not the same")
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InconsistentElevationGroupError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x17b4,
  () => new InconsistentElevationGroupError()
)
createErrorFromNameLookup.set(
  'InconsistentElevationGroup',
  () => new InconsistentElevationGroupError()
)

/**
 * InvalidElevationGroup: 'The elevation group chosen for the reserve does not exist in the lending market'
 *
 * @category Errors
 * @category generated
 */
export class InvalidElevationGroupError extends Error {
  readonly code: number = 0x17b5
  readonly name: string = 'InvalidElevationGroup'
  constructor() {
    super(
      'The elevation group chosen for the reserve does not exist in the lending market'
    )
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidElevationGroupError)
    }
  }
}

createErrorFromCodeLookup.set(0x17b5, () => new InvalidElevationGroupError())
createErrorFromNameLookup.set(
  'InvalidElevationGroup',
  () => new InvalidElevationGroupError()
)

/**
 * InvalidElevationGroupConfig: 'The elevation group updated has wrong parameters set'
 *
 * @category Errors
 * @category generated
 */
export class InvalidElevationGroupConfigError extends Error {
  readonly code: number = 0x17b6
  readonly name: string = 'InvalidElevationGroupConfig'
  constructor() {
    super('The elevation group updated has wrong parameters set')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidElevationGroupConfigError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x17b6,
  () => new InvalidElevationGroupConfigError()
)
createErrorFromNameLookup.set(
  'InvalidElevationGroupConfig',
  () => new InvalidElevationGroupConfigError()
)

/**
 * UnhealthyElevationGroupLtv: 'The current obligation must have most or all its debt repaid before changing the elevation group'
 *
 * @category Errors
 * @category generated
 */
export class UnhealthyElevationGroupLtvError extends Error {
  readonly code: number = 0x17b7
  readonly name: string = 'UnhealthyElevationGroupLtv'
  constructor() {
    super(
      'The current obligation must have most or all its debt repaid before changing the elevation group'
    )
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, UnhealthyElevationGroupLtvError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x17b7,
  () => new UnhealthyElevationGroupLtvError()
)
createErrorFromNameLookup.set(
  'UnhealthyElevationGroupLtv',
  () => new UnhealthyElevationGroupLtvError()
)

/**
 * ElevationGroupNewLoansDisabled: 'Elevation group does not accept any new loans or any new borrows/withdrawals'
 *
 * @category Errors
 * @category generated
 */
export class ElevationGroupNewLoansDisabledError extends Error {
  readonly code: number = 0x17b8
  readonly name: string = 'ElevationGroupNewLoansDisabled'
  constructor() {
    super(
      'Elevation group does not accept any new loans or any new borrows/withdrawals'
    )
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, ElevationGroupNewLoansDisabledError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x17b8,
  () => new ElevationGroupNewLoansDisabledError()
)
createErrorFromNameLookup.set(
  'ElevationGroupNewLoansDisabled',
  () => new ElevationGroupNewLoansDisabledError()
)

/**
 * ReserveDeprecated: 'Reserve was deprecated, no longer usable'
 *
 * @category Errors
 * @category generated
 */
export class ReserveDeprecatedError extends Error {
  readonly code: number = 0x17b9
  readonly name: string = 'ReserveDeprecated'
  constructor() {
    super('Reserve was deprecated, no longer usable')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, ReserveDeprecatedError)
    }
  }
}

createErrorFromCodeLookup.set(0x17b9, () => new ReserveDeprecatedError())
createErrorFromNameLookup.set(
  'ReserveDeprecated',
  () => new ReserveDeprecatedError()
)

/**
 * ReferrerAccountNotInitialized: 'Referrer account not initialized'
 *
 * @category Errors
 * @category generated
 */
export class ReferrerAccountNotInitializedError extends Error {
  readonly code: number = 0x17ba
  readonly name: string = 'ReferrerAccountNotInitialized'
  constructor() {
    super('Referrer account not initialized')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, ReferrerAccountNotInitializedError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x17ba,
  () => new ReferrerAccountNotInitializedError()
)
createErrorFromNameLookup.set(
  'ReferrerAccountNotInitialized',
  () => new ReferrerAccountNotInitializedError()
)

/**
 * ReferrerAccountMintMissmatch: 'Referrer account mint does not match the operation reserve mint'
 *
 * @category Errors
 * @category generated
 */
export class ReferrerAccountMintMissmatchError extends Error {
  readonly code: number = 0x17bb
  readonly name: string = 'ReferrerAccountMintMissmatch'
  constructor() {
    super('Referrer account mint does not match the operation reserve mint')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, ReferrerAccountMintMissmatchError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x17bb,
  () => new ReferrerAccountMintMissmatchError()
)
createErrorFromNameLookup.set(
  'ReferrerAccountMintMissmatch',
  () => new ReferrerAccountMintMissmatchError()
)

/**
 * ReferrerAccountWrongAddress: 'Referrer account address is not a valid program address'
 *
 * @category Errors
 * @category generated
 */
export class ReferrerAccountWrongAddressError extends Error {
  readonly code: number = 0x17bc
  readonly name: string = 'ReferrerAccountWrongAddress'
  constructor() {
    super('Referrer account address is not a valid program address')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, ReferrerAccountWrongAddressError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x17bc,
  () => new ReferrerAccountWrongAddressError()
)
createErrorFromNameLookup.set(
  'ReferrerAccountWrongAddress',
  () => new ReferrerAccountWrongAddressError()
)

/**
 * ReferrerAccountReferrerMissmatch: 'Referrer account referrer does not match the owner referrer'
 *
 * @category Errors
 * @category generated
 */
export class ReferrerAccountReferrerMissmatchError extends Error {
  readonly code: number = 0x17bd
  readonly name: string = 'ReferrerAccountReferrerMissmatch'
  constructor() {
    super('Referrer account referrer does not match the owner referrer')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, ReferrerAccountReferrerMissmatchError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x17bd,
  () => new ReferrerAccountReferrerMissmatchError()
)
createErrorFromNameLookup.set(
  'ReferrerAccountReferrerMissmatch',
  () => new ReferrerAccountReferrerMissmatchError()
)

/**
 * ReferrerAccountMissing: 'Referrer account missing for obligation with referrer'
 *
 * @category Errors
 * @category generated
 */
export class ReferrerAccountMissingError extends Error {
  readonly code: number = 0x17be
  readonly name: string = 'ReferrerAccountMissing'
  constructor() {
    super('Referrer account missing for obligation with referrer')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, ReferrerAccountMissingError)
    }
  }
}

createErrorFromCodeLookup.set(0x17be, () => new ReferrerAccountMissingError())
createErrorFromNameLookup.set(
  'ReferrerAccountMissing',
  () => new ReferrerAccountMissingError()
)

/**
 * InsufficientReferralFeesToRedeem: 'Insufficient referral fees to claim or no liquidity available'
 *
 * @category Errors
 * @category generated
 */
export class InsufficientReferralFeesToRedeemError extends Error {
  readonly code: number = 0x17bf
  readonly name: string = 'InsufficientReferralFeesToRedeem'
  constructor() {
    super('Insufficient referral fees to claim or no liquidity available')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InsufficientReferralFeesToRedeemError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x17bf,
  () => new InsufficientReferralFeesToRedeemError()
)
createErrorFromNameLookup.set(
  'InsufficientReferralFeesToRedeem',
  () => new InsufficientReferralFeesToRedeemError()
)

/**
 * CpiDisabled: 'CPI disabled for this instruction'
 *
 * @category Errors
 * @category generated
 */
export class CpiDisabledError extends Error {
  readonly code: number = 0x17c0
  readonly name: string = 'CpiDisabled'
  constructor() {
    super('CPI disabled for this instruction')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, CpiDisabledError)
    }
  }
}

createErrorFromCodeLookup.set(0x17c0, () => new CpiDisabledError())
createErrorFromNameLookup.set('CpiDisabled', () => new CpiDisabledError())

/**
 * ShortUrlNotAsciiAlphanumeric: 'Referrer short_url is not ascii alphanumeric'
 *
 * @category Errors
 * @category generated
 */
export class ShortUrlNotAsciiAlphanumericError extends Error {
  readonly code: number = 0x17c1
  readonly name: string = 'ShortUrlNotAsciiAlphanumeric'
  constructor() {
    super('Referrer short_url is not ascii alphanumeric')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, ShortUrlNotAsciiAlphanumericError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x17c1,
  () => new ShortUrlNotAsciiAlphanumericError()
)
createErrorFromNameLookup.set(
  'ShortUrlNotAsciiAlphanumeric',
  () => new ShortUrlNotAsciiAlphanumericError()
)

/**
 * ReserveObsolete: 'Reserve is marked as obsolete'
 *
 * @category Errors
 * @category generated
 */
export class ReserveObsoleteError extends Error {
  readonly code: number = 0x17c2
  readonly name: string = 'ReserveObsolete'
  constructor() {
    super('Reserve is marked as obsolete')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, ReserveObsoleteError)
    }
  }
}

createErrorFromCodeLookup.set(0x17c2, () => new ReserveObsoleteError())
createErrorFromNameLookup.set(
  'ReserveObsolete',
  () => new ReserveObsoleteError()
)

/**
 * ElevationGroupAlreadyActivated: 'Obligation already part of the same elevation group'
 *
 * @category Errors
 * @category generated
 */
export class ElevationGroupAlreadyActivatedError extends Error {
  readonly code: number = 0x17c3
  readonly name: string = 'ElevationGroupAlreadyActivated'
  constructor() {
    super('Obligation already part of the same elevation group')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, ElevationGroupAlreadyActivatedError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x17c3,
  () => new ElevationGroupAlreadyActivatedError()
)
createErrorFromNameLookup.set(
  'ElevationGroupAlreadyActivated',
  () => new ElevationGroupAlreadyActivatedError()
)

/**
 * ObligationInDeprecatedReserve: 'Obligation has a deposit in a deprecated reserve'
 *
 * @category Errors
 * @category generated
 */
export class ObligationInDeprecatedReserveError extends Error {
  readonly code: number = 0x17c4
  readonly name: string = 'ObligationInDeprecatedReserve'
  constructor() {
    super('Obligation has a deposit in a deprecated reserve')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, ObligationInDeprecatedReserveError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x17c4,
  () => new ObligationInDeprecatedReserveError()
)
createErrorFromNameLookup.set(
  'ObligationInDeprecatedReserve',
  () => new ObligationInDeprecatedReserveError()
)

/**
 * ReferrerStateOwnerMismatch: 'Referrer state owner does not match the given signer'
 *
 * @category Errors
 * @category generated
 */
export class ReferrerStateOwnerMismatchError extends Error {
  readonly code: number = 0x17c5
  readonly name: string = 'ReferrerStateOwnerMismatch'
  constructor() {
    super('Referrer state owner does not match the given signer')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, ReferrerStateOwnerMismatchError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x17c5,
  () => new ReferrerStateOwnerMismatchError()
)
createErrorFromNameLookup.set(
  'ReferrerStateOwnerMismatch',
  () => new ReferrerStateOwnerMismatchError()
)

/**
 * UserMetadataOwnerAlreadySet: 'User metadata owner is already set'
 *
 * @category Errors
 * @category generated
 */
export class UserMetadataOwnerAlreadySetError extends Error {
  readonly code: number = 0x17c6
  readonly name: string = 'UserMetadataOwnerAlreadySet'
  constructor() {
    super('User metadata owner is already set')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, UserMetadataOwnerAlreadySetError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x17c6,
  () => new UserMetadataOwnerAlreadySetError()
)
createErrorFromNameLookup.set(
  'UserMetadataOwnerAlreadySet',
  () => new UserMetadataOwnerAlreadySetError()
)

/**
 * Attempts to resolve a custom program error from the provided error code.
 * @category Errors
 * @category generated
 */
export function errorFromCode(code: number): MaybeErrorWithCode {
  const createError = createErrorFromCodeLookup.get(code)
  return createError != null ? createError() : null
}

/**
 * Attempts to resolve a custom program error from the provided error name, i.e. 'Unauthorized'.
 * @category Errors
 * @category generated
 */
export function errorFromName(name: string): MaybeErrorWithCode {
  const createError = createErrorFromNameLookup.get(name)
  return createError != null ? createError() : null
}
