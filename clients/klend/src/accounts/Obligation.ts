/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'
import * as beetSolana from '@metaplex-foundation/beet-solana'
import { LastUpdate, lastUpdateBeet } from '../types/LastUpdate'
import {
  ObligationCollateral,
  obligationCollateralBeet,
} from '../types/ObligationCollateral'
import {
  ObligationLiquidity,
  obligationLiquidityBeet,
} from '../types/ObligationLiquidity'

/**
 * Arguments used to create {@link Obligation}
 * @category Accounts
 * @category generated
 */
export type ObligationArgs = {
  tag: beet.bignum
  lastUpdate: LastUpdate
  lendingMarket: web3.PublicKey
  owner: web3.PublicKey
  deposits: ObligationCollateral[] /* size: 8 */
  lowestReserveDepositLtv: beet.bignum
  depositedValueSf: beet.bignum
  borrows: ObligationLiquidity[] /* size: 5 */
  borrowFactorAdjustedDebtValueSf: beet.bignum
  borrowedAssetsMarketValueSf: beet.bignum
  allowedBorrowValueSf: beet.bignum
  unhealthyBorrowValueSf: beet.bignum
  depositsAssetTiers: number[] /* size: 8 */
  borrowsAssetTiers: number[] /* size: 5 */
  elevationGroup: number
  numOfObsoleteReserves: number
  hasDebt: number
  referrer: web3.PublicKey
  padding3: beet.bignum[] /* size: 128 */
}

export const obligationDiscriminator = [168, 206, 141, 106, 88, 76, 172, 167]
/**
 * Holds the data for the {@link Obligation} Account and provides de/serialization
 * functionality for that data
 *
 * @category Accounts
 * @category generated
 */
export class Obligation implements ObligationArgs {
  private constructor(
    readonly tag: beet.bignum,
    readonly lastUpdate: LastUpdate,
    readonly lendingMarket: web3.PublicKey,
    readonly owner: web3.PublicKey,
    readonly deposits: ObligationCollateral[] /* size: 8 */,
    readonly lowestReserveDepositLtv: beet.bignum,
    readonly depositedValueSf: beet.bignum,
    readonly borrows: ObligationLiquidity[] /* size: 5 */,
    readonly borrowFactorAdjustedDebtValueSf: beet.bignum,
    readonly borrowedAssetsMarketValueSf: beet.bignum,
    readonly allowedBorrowValueSf: beet.bignum,
    readonly unhealthyBorrowValueSf: beet.bignum,
    readonly depositsAssetTiers: number[] /* size: 8 */,
    readonly borrowsAssetTiers: number[] /* size: 5 */,
    readonly elevationGroup: number,
    readonly numOfObsoleteReserves: number,
    readonly hasDebt: number,
    readonly referrer: web3.PublicKey,
    readonly padding3: beet.bignum[] /* size: 128 */
  ) {}

  /**
   * Creates a {@link Obligation} instance from the provided args.
   */
  static fromArgs(args: ObligationArgs) {
    return new Obligation(
      args.tag,
      args.lastUpdate,
      args.lendingMarket,
      args.owner,
      args.deposits,
      args.lowestReserveDepositLtv,
      args.depositedValueSf,
      args.borrows,
      args.borrowFactorAdjustedDebtValueSf,
      args.borrowedAssetsMarketValueSf,
      args.allowedBorrowValueSf,
      args.unhealthyBorrowValueSf,
      args.depositsAssetTiers,
      args.borrowsAssetTiers,
      args.elevationGroup,
      args.numOfObsoleteReserves,
      args.hasDebt,
      args.referrer,
      args.padding3
    )
  }

  /**
   * Deserializes the {@link Obligation} from the data of the provided {@link web3.AccountInfo}.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static fromAccountInfo(
    accountInfo: web3.AccountInfo<Buffer>,
    offset = 0
  ): [Obligation, number] {
    return Obligation.deserialize(accountInfo.data, offset)
  }

  /**
   * Retrieves the account info from the provided address and deserializes
   * the {@link Obligation} from its data.
   *
   * @throws Error if no account info is found at the address or if deserialization fails
   */
  static async fromAccountAddress(
    connection: web3.Connection,
    address: web3.PublicKey,
    commitmentOrConfig?: web3.Commitment | web3.GetAccountInfoConfig
  ): Promise<Obligation> {
    const accountInfo = await connection.getAccountInfo(
      address,
      commitmentOrConfig
    )
    if (accountInfo == null) {
      throw new Error(`Unable to find Obligation account at ${address}`)
    }
    return Obligation.fromAccountInfo(accountInfo, 0)[0]
  }

  /**
   * Provides a {@link web3.Connection.getProgramAccounts} config builder,
   * to fetch accounts matching filters that can be specified via that builder.
   *
   * @param programId - the program that owns the accounts we are filtering
   */
  static gpaBuilder(
    programId: web3.PublicKey = new web3.PublicKey(
      'HUHJsverovPJN3sVtv8J8D48fKzeajRtz3Ga4Zmh4RLA'
    )
  ) {
    return beetSolana.GpaBuilder.fromStruct(programId, obligationBeet)
  }

  /**
   * Deserializes the {@link Obligation} from the provided data Buffer.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static deserialize(buf: Buffer, offset = 0): [Obligation, number] {
    return obligationBeet.deserialize(buf, offset)
  }

  /**
   * Serializes the {@link Obligation} into a Buffer.
   * @returns a tuple of the created Buffer and the offset up to which the buffer was written to store it.
   */
  serialize(): [Buffer, number] {
    return obligationBeet.serialize({
      accountDiscriminator: obligationDiscriminator,
      ...this,
    })
  }

  /**
   * Returns the byteSize of a {@link Buffer} holding the serialized data of
   * {@link Obligation}
   */
  static get byteSize() {
    return obligationBeet.byteSize
  }

  /**
   * Fetches the minimum balance needed to exempt an account holding
   * {@link Obligation} data from rent
   *
   * @param connection used to retrieve the rent exemption information
   */
  static async getMinimumBalanceForRentExemption(
    connection: web3.Connection,
    commitment?: web3.Commitment
  ): Promise<number> {
    return connection.getMinimumBalanceForRentExemption(
      Obligation.byteSize,
      commitment
    )
  }

  /**
   * Determines if the provided {@link Buffer} has the correct byte size to
   * hold {@link Obligation} data.
   */
  static hasCorrectByteSize(buf: Buffer, offset = 0) {
    return buf.byteLength - offset === Obligation.byteSize
  }

  /**
   * Returns a readable version of {@link Obligation} properties
   * and can be used to convert to JSON and/or logging
   */
  pretty() {
    return {
      tag: (() => {
        const x = <{ toNumber: () => number }>this.tag
        if (typeof x.toNumber === 'function') {
          try {
            return x.toNumber()
          } catch (_) {
            return x
          }
        }
        return x
      })(),
      lastUpdate: this.lastUpdate,
      lendingMarket: this.lendingMarket.toBase58(),
      owner: this.owner.toBase58(),
      deposits: this.deposits,
      lowestReserveDepositLtv: (() => {
        const x = <{ toNumber: () => number }>this.lowestReserveDepositLtv
        if (typeof x.toNumber === 'function') {
          try {
            return x.toNumber()
          } catch (_) {
            return x
          }
        }
        return x
      })(),
      depositedValueSf: (() => {
        const x = <{ toNumber: () => number }>this.depositedValueSf
        if (typeof x.toNumber === 'function') {
          try {
            return x.toNumber()
          } catch (_) {
            return x
          }
        }
        return x
      })(),
      borrows: this.borrows,
      borrowFactorAdjustedDebtValueSf: (() => {
        const x = <{ toNumber: () => number }>(
          this.borrowFactorAdjustedDebtValueSf
        )
        if (typeof x.toNumber === 'function') {
          try {
            return x.toNumber()
          } catch (_) {
            return x
          }
        }
        return x
      })(),
      borrowedAssetsMarketValueSf: (() => {
        const x = <{ toNumber: () => number }>this.borrowedAssetsMarketValueSf
        if (typeof x.toNumber === 'function') {
          try {
            return x.toNumber()
          } catch (_) {
            return x
          }
        }
        return x
      })(),
      allowedBorrowValueSf: (() => {
        const x = <{ toNumber: () => number }>this.allowedBorrowValueSf
        if (typeof x.toNumber === 'function') {
          try {
            return x.toNumber()
          } catch (_) {
            return x
          }
        }
        return x
      })(),
      unhealthyBorrowValueSf: (() => {
        const x = <{ toNumber: () => number }>this.unhealthyBorrowValueSf
        if (typeof x.toNumber === 'function') {
          try {
            return x.toNumber()
          } catch (_) {
            return x
          }
        }
        return x
      })(),
      depositsAssetTiers: this.depositsAssetTiers,
      borrowsAssetTiers: this.borrowsAssetTiers,
      elevationGroup: this.elevationGroup,
      numOfObsoleteReserves: this.numOfObsoleteReserves,
      hasDebt: this.hasDebt,
      referrer: this.referrer.toBase58(),
      padding3: this.padding3,
    }
  }
}

/**
 * @category Accounts
 * @category generated
 */
export const obligationBeet = new beet.BeetStruct<
  Obligation,
  ObligationArgs & {
    accountDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['accountDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['tag', beet.u64],
    ['lastUpdate', lastUpdateBeet],
    ['lendingMarket', beetSolana.publicKey],
    ['owner', beetSolana.publicKey],
    ['deposits', beet.uniformFixedSizeArray(obligationCollateralBeet, 8)],
    ['lowestReserveDepositLtv', beet.u64],
    ['depositedValueSf', beet.u128],
    ['borrows', beet.uniformFixedSizeArray(obligationLiquidityBeet, 5)],
    ['borrowFactorAdjustedDebtValueSf', beet.u128],
    ['borrowedAssetsMarketValueSf', beet.u128],
    ['allowedBorrowValueSf', beet.u128],
    ['unhealthyBorrowValueSf', beet.u128],
    ['depositsAssetTiers', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['borrowsAssetTiers', beet.uniformFixedSizeArray(beet.u8, 5)],
    ['elevationGroup', beet.u8],
    ['numOfObsoleteReserves', beet.u8],
    ['hasDebt', beet.u8],
    ['referrer', beetSolana.publicKey],
    ['padding3', beet.uniformFixedSizeArray(beet.u64, 128)],
  ],
  Obligation.fromArgs,
  'Obligation'
)
