/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'
import * as beetSolana from '@metaplex-foundation/beet-solana'
import { LastUpdate, lastUpdateBeet } from '../types/LastUpdate'
import {
  ReserveLiquidity,
  reserveLiquidityBeet,
} from '../types/ReserveLiquidity'
import {
  ReserveCollateral,
  reserveCollateralBeet,
} from '../types/ReserveCollateral'
import { ReserveConfig, reserveConfigBeet } from '../types/ReserveConfig'

/**
 * Arguments used to create {@link Reserve}
 * @category Accounts
 * @category generated
 */
export type ReserveArgs = {
  version: beet.bignum
  lastUpdate: LastUpdate
  lendingMarket: web3.PublicKey
  farmCollateral: web3.PublicKey
  farmDebt: web3.PublicKey
  liquidity: ReserveLiquidity
  reserveLiquidityPadding: beet.bignum[] /* size: 150 */
  collateral: ReserveCollateral
  reserveCollateralPadding: beet.bignum[] /* size: 150 */
  config: ReserveConfig
  configPadding: beet.bignum[] /* size: 150 */
  padding: beet.bignum[] /* size: 240 */
}

export const reserveDiscriminator = [43, 242, 204, 202, 26, 247, 59, 127]
/**
 * Holds the data for the {@link Reserve} Account and provides de/serialization
 * functionality for that data
 *
 * @category Accounts
 * @category generated
 */
export class Reserve implements ReserveArgs {
  private constructor(
    readonly version: beet.bignum,
    readonly lastUpdate: LastUpdate,
    readonly lendingMarket: web3.PublicKey,
    readonly farmCollateral: web3.PublicKey,
    readonly farmDebt: web3.PublicKey,
    readonly liquidity: ReserveLiquidity,
    readonly reserveLiquidityPadding: beet.bignum[] /* size: 150 */,
    readonly collateral: ReserveCollateral,
    readonly reserveCollateralPadding: beet.bignum[] /* size: 150 */,
    readonly config: ReserveConfig,
    readonly configPadding: beet.bignum[] /* size: 150 */,
    readonly padding: beet.bignum[] /* size: 240 */
  ) {}

  /**
   * Creates a {@link Reserve} instance from the provided args.
   */
  static fromArgs(args: ReserveArgs) {
    return new Reserve(
      args.version,
      args.lastUpdate,
      args.lendingMarket,
      args.farmCollateral,
      args.farmDebt,
      args.liquidity,
      args.reserveLiquidityPadding,
      args.collateral,
      args.reserveCollateralPadding,
      args.config,
      args.configPadding,
      args.padding
    )
  }

  /**
   * Deserializes the {@link Reserve} from the data of the provided {@link web3.AccountInfo}.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static fromAccountInfo(
    accountInfo: web3.AccountInfo<Buffer>,
    offset = 0
  ): [Reserve, number] {
    return Reserve.deserialize(accountInfo.data, offset)
  }

  /**
   * Retrieves the account info from the provided address and deserializes
   * the {@link Reserve} from its data.
   *
   * @throws Error if no account info is found at the address or if deserialization fails
   */
  static async fromAccountAddress(
    connection: web3.Connection,
    address: web3.PublicKey,
    commitmentOrConfig?: web3.Commitment | web3.GetAccountInfoConfig
  ): Promise<Reserve> {
    const accountInfo = await connection.getAccountInfo(
      address,
      commitmentOrConfig
    )
    if (accountInfo == null) {
      throw new Error(`Unable to find Reserve account at ${address}`)
    }
    return Reserve.fromAccountInfo(accountInfo, 0)[0]
  }

  /**
   * Provides a {@link web3.Connection.getProgramAccounts} config builder,
   * to fetch accounts matching filters that can be specified via that builder.
   *
   * @param programId - the program that owns the accounts we are filtering
   */
  static gpaBuilder(
    programId: web3.PublicKey = new web3.PublicKey(
      'HUHJsverovPJN3sVtv8J8D48fKzeajRtz3Ga4Zmh4RLA'
    )
  ) {
    return beetSolana.GpaBuilder.fromStruct(programId, reserveBeet)
  }

  /**
   * Deserializes the {@link Reserve} from the provided data Buffer.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static deserialize(buf: Buffer, offset = 0): [Reserve, number] {
    return reserveBeet.deserialize(buf, offset)
  }

  /**
   * Serializes the {@link Reserve} into a Buffer.
   * @returns a tuple of the created Buffer and the offset up to which the buffer was written to store it.
   */
  serialize(): [Buffer, number] {
    return reserveBeet.serialize({
      accountDiscriminator: reserveDiscriminator,
      ...this,
    })
  }

  /**
   * Returns the byteSize of a {@link Buffer} holding the serialized data of
   * {@link Reserve}
   */
  static get byteSize() {
    return reserveBeet.byteSize
  }

  /**
   * Fetches the minimum balance needed to exempt an account holding
   * {@link Reserve} data from rent
   *
   * @param connection used to retrieve the rent exemption information
   */
  static async getMinimumBalanceForRentExemption(
    connection: web3.Connection,
    commitment?: web3.Commitment
  ): Promise<number> {
    return connection.getMinimumBalanceForRentExemption(
      Reserve.byteSize,
      commitment
    )
  }

  /**
   * Determines if the provided {@link Buffer} has the correct byte size to
   * hold {@link Reserve} data.
   */
  static hasCorrectByteSize(buf: Buffer, offset = 0) {
    return buf.byteLength - offset === Reserve.byteSize
  }

  /**
   * Returns a readable version of {@link Reserve} properties
   * and can be used to convert to JSON and/or logging
   */
  pretty() {
    return {
      version: (() => {
        const x = <{ toNumber: () => number }>this.version
        if (typeof x.toNumber === 'function') {
          try {
            return x.toNumber()
          } catch (_) {
            return x
          }
        }
        return x
      })(),
      lastUpdate: this.lastUpdate,
      lendingMarket: this.lendingMarket.toBase58(),
      farmCollateral: this.farmCollateral.toBase58(),
      farmDebt: this.farmDebt.toBase58(),
      liquidity: this.liquidity,
      reserveLiquidityPadding: this.reserveLiquidityPadding,
      collateral: this.collateral,
      reserveCollateralPadding: this.reserveCollateralPadding,
      config: this.config,
      configPadding: this.configPadding,
      padding: this.padding,
    }
  }
}

/**
 * @category Accounts
 * @category generated
 */
export const reserveBeet = new beet.BeetStruct<
  Reserve,
  ReserveArgs & {
    accountDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['accountDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['version', beet.u64],
    ['lastUpdate', lastUpdateBeet],
    ['lendingMarket', beetSolana.publicKey],
    ['farmCollateral', beetSolana.publicKey],
    ['farmDebt', beetSolana.publicKey],
    ['liquidity', reserveLiquidityBeet],
    ['reserveLiquidityPadding', beet.uniformFixedSizeArray(beet.u64, 150)],
    ['collateral', reserveCollateralBeet],
    ['reserveCollateralPadding', beet.uniformFixedSizeArray(beet.u64, 150)],
    ['config', reserveConfigBeet],
    ['configPadding', beet.uniformFixedSizeArray(beet.u64, 150)],
    ['padding', beet.uniformFixedSizeArray(beet.u64, 240)],
  ],
  Reserve.fromArgs,
  'Reserve'
)
