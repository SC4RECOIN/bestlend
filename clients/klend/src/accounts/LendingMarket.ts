/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'
import * as beetSolana from '@metaplex-foundation/beet-solana'
import { ElevationGroup, elevationGroupBeet } from '../types/ElevationGroup'

/**
 * Arguments used to create {@link LendingMarket}
 * @category Accounts
 * @category generated
 */
export type LendingMarketArgs = {
  version: beet.bignum
  bumpSeed: beet.bignum
  lendingMarketOwner: web3.PublicKey
  lendingMarketOwnerCached: web3.PublicKey
  quoteCurrency: number[] /* size: 32 */
  referralFeeBps: number
  emergencyMode: number
  autodeleverageEnabled: number
  reserved: number[] /* size: 1 */
  priceRefreshTriggerToMaxAgePct: number
  liquidationMaxDebtCloseFactorPct: number
  insolvencyRiskUnhealthyLtvPct: number
  minFullLiquidationValueThreshold: beet.bignum
  maxLiquidatableDebtMarketValueAtOnce: beet.bignum
  globalUnhealthyBorrowValue: beet.bignum
  globalAllowedBorrowValue: beet.bignum
  riskCouncil: web3.PublicKey
  multiplierPointsTagBoost: number[] /* size: 8 */
  elevationGroups: ElevationGroup[] /* size: 32 */
  elevationGroupPadding: beet.bignum[] /* size: 90 */
  padding1: beet.bignum[] /* size: 180 */
}

export const lendingMarketDiscriminator = [246, 114, 50, 98, 72, 157, 28, 120]
/**
 * Holds the data for the {@link LendingMarket} Account and provides de/serialization
 * functionality for that data
 *
 * @category Accounts
 * @category generated
 */
export class LendingMarket implements LendingMarketArgs {
  private constructor(
    readonly version: beet.bignum,
    readonly bumpSeed: beet.bignum,
    readonly lendingMarketOwner: web3.PublicKey,
    readonly lendingMarketOwnerCached: web3.PublicKey,
    readonly quoteCurrency: number[] /* size: 32 */,
    readonly referralFeeBps: number,
    readonly emergencyMode: number,
    readonly autodeleverageEnabled: number,
    readonly reserved: number[] /* size: 1 */,
    readonly priceRefreshTriggerToMaxAgePct: number,
    readonly liquidationMaxDebtCloseFactorPct: number,
    readonly insolvencyRiskUnhealthyLtvPct: number,
    readonly minFullLiquidationValueThreshold: beet.bignum,
    readonly maxLiquidatableDebtMarketValueAtOnce: beet.bignum,
    readonly globalUnhealthyBorrowValue: beet.bignum,
    readonly globalAllowedBorrowValue: beet.bignum,
    readonly riskCouncil: web3.PublicKey,
    readonly multiplierPointsTagBoost: number[] /* size: 8 */,
    readonly elevationGroups: ElevationGroup[] /* size: 32 */,
    readonly elevationGroupPadding: beet.bignum[] /* size: 90 */,
    readonly padding1: beet.bignum[] /* size: 180 */
  ) {}

  /**
   * Creates a {@link LendingMarket} instance from the provided args.
   */
  static fromArgs(args: LendingMarketArgs) {
    return new LendingMarket(
      args.version,
      args.bumpSeed,
      args.lendingMarketOwner,
      args.lendingMarketOwnerCached,
      args.quoteCurrency,
      args.referralFeeBps,
      args.emergencyMode,
      args.autodeleverageEnabled,
      args.reserved,
      args.priceRefreshTriggerToMaxAgePct,
      args.liquidationMaxDebtCloseFactorPct,
      args.insolvencyRiskUnhealthyLtvPct,
      args.minFullLiquidationValueThreshold,
      args.maxLiquidatableDebtMarketValueAtOnce,
      args.globalUnhealthyBorrowValue,
      args.globalAllowedBorrowValue,
      args.riskCouncil,
      args.multiplierPointsTagBoost,
      args.elevationGroups,
      args.elevationGroupPadding,
      args.padding1
    )
  }

  /**
   * Deserializes the {@link LendingMarket} from the data of the provided {@link web3.AccountInfo}.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static fromAccountInfo(
    accountInfo: web3.AccountInfo<Buffer>,
    offset = 0
  ): [LendingMarket, number] {
    return LendingMarket.deserialize(accountInfo.data, offset)
  }

  /**
   * Retrieves the account info from the provided address and deserializes
   * the {@link LendingMarket} from its data.
   *
   * @throws Error if no account info is found at the address or if deserialization fails
   */
  static async fromAccountAddress(
    connection: web3.Connection,
    address: web3.PublicKey,
    commitmentOrConfig?: web3.Commitment | web3.GetAccountInfoConfig
  ): Promise<LendingMarket> {
    const accountInfo = await connection.getAccountInfo(
      address,
      commitmentOrConfig
    )
    if (accountInfo == null) {
      throw new Error(`Unable to find LendingMarket account at ${address}`)
    }
    return LendingMarket.fromAccountInfo(accountInfo, 0)[0]
  }

  /**
   * Provides a {@link web3.Connection.getProgramAccounts} config builder,
   * to fetch accounts matching filters that can be specified via that builder.
   *
   * @param programId - the program that owns the accounts we are filtering
   */
  static gpaBuilder(
    programId: web3.PublicKey = new web3.PublicKey(
      'HUHJsverovPJN3sVtv8J8D48fKzeajRtz3Ga4Zmh4RLA'
    )
  ) {
    return beetSolana.GpaBuilder.fromStruct(programId, lendingMarketBeet)
  }

  /**
   * Deserializes the {@link LendingMarket} from the provided data Buffer.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static deserialize(buf: Buffer, offset = 0): [LendingMarket, number] {
    return lendingMarketBeet.deserialize(buf, offset)
  }

  /**
   * Serializes the {@link LendingMarket} into a Buffer.
   * @returns a tuple of the created Buffer and the offset up to which the buffer was written to store it.
   */
  serialize(): [Buffer, number] {
    return lendingMarketBeet.serialize({
      accountDiscriminator: lendingMarketDiscriminator,
      ...this,
    })
  }

  /**
   * Returns the byteSize of a {@link Buffer} holding the serialized data of
   * {@link LendingMarket}
   */
  static get byteSize() {
    return lendingMarketBeet.byteSize
  }

  /**
   * Fetches the minimum balance needed to exempt an account holding
   * {@link LendingMarket} data from rent
   *
   * @param connection used to retrieve the rent exemption information
   */
  static async getMinimumBalanceForRentExemption(
    connection: web3.Connection,
    commitment?: web3.Commitment
  ): Promise<number> {
    return connection.getMinimumBalanceForRentExemption(
      LendingMarket.byteSize,
      commitment
    )
  }

  /**
   * Determines if the provided {@link Buffer} has the correct byte size to
   * hold {@link LendingMarket} data.
   */
  static hasCorrectByteSize(buf: Buffer, offset = 0) {
    return buf.byteLength - offset === LendingMarket.byteSize
  }

  /**
   * Returns a readable version of {@link LendingMarket} properties
   * and can be used to convert to JSON and/or logging
   */
  pretty() {
    return {
      version: (() => {
        const x = <{ toNumber: () => number }>this.version
        if (typeof x.toNumber === 'function') {
          try {
            return x.toNumber()
          } catch (_) {
            return x
          }
        }
        return x
      })(),
      bumpSeed: (() => {
        const x = <{ toNumber: () => number }>this.bumpSeed
        if (typeof x.toNumber === 'function') {
          try {
            return x.toNumber()
          } catch (_) {
            return x
          }
        }
        return x
      })(),
      lendingMarketOwner: this.lendingMarketOwner.toBase58(),
      lendingMarketOwnerCached: this.lendingMarketOwnerCached.toBase58(),
      quoteCurrency: this.quoteCurrency,
      referralFeeBps: this.referralFeeBps,
      emergencyMode: this.emergencyMode,
      autodeleverageEnabled: this.autodeleverageEnabled,
      reserved: this.reserved,
      priceRefreshTriggerToMaxAgePct: this.priceRefreshTriggerToMaxAgePct,
      liquidationMaxDebtCloseFactorPct: this.liquidationMaxDebtCloseFactorPct,
      insolvencyRiskUnhealthyLtvPct: this.insolvencyRiskUnhealthyLtvPct,
      minFullLiquidationValueThreshold: (() => {
        const x = <{ toNumber: () => number }>(
          this.minFullLiquidationValueThreshold
        )
        if (typeof x.toNumber === 'function') {
          try {
            return x.toNumber()
          } catch (_) {
            return x
          }
        }
        return x
      })(),
      maxLiquidatableDebtMarketValueAtOnce: (() => {
        const x = <{ toNumber: () => number }>(
          this.maxLiquidatableDebtMarketValueAtOnce
        )
        if (typeof x.toNumber === 'function') {
          try {
            return x.toNumber()
          } catch (_) {
            return x
          }
        }
        return x
      })(),
      globalUnhealthyBorrowValue: (() => {
        const x = <{ toNumber: () => number }>this.globalUnhealthyBorrowValue
        if (typeof x.toNumber === 'function') {
          try {
            return x.toNumber()
          } catch (_) {
            return x
          }
        }
        return x
      })(),
      globalAllowedBorrowValue: (() => {
        const x = <{ toNumber: () => number }>this.globalAllowedBorrowValue
        if (typeof x.toNumber === 'function') {
          try {
            return x.toNumber()
          } catch (_) {
            return x
          }
        }
        return x
      })(),
      riskCouncil: this.riskCouncil.toBase58(),
      multiplierPointsTagBoost: this.multiplierPointsTagBoost,
      elevationGroups: this.elevationGroups,
      elevationGroupPadding: this.elevationGroupPadding,
      padding1: this.padding1,
    }
  }
}

/**
 * @category Accounts
 * @category generated
 */
export const lendingMarketBeet = new beet.BeetStruct<
  LendingMarket,
  LendingMarketArgs & {
    accountDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['accountDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['version', beet.u64],
    ['bumpSeed', beet.u64],
    ['lendingMarketOwner', beetSolana.publicKey],
    ['lendingMarketOwnerCached', beetSolana.publicKey],
    ['quoteCurrency', beet.uniformFixedSizeArray(beet.u8, 32)],
    ['referralFeeBps', beet.u16],
    ['emergencyMode', beet.u8],
    ['autodeleverageEnabled', beet.u8],
    ['reserved', beet.uniformFixedSizeArray(beet.u8, 1)],
    ['priceRefreshTriggerToMaxAgePct', beet.u8],
    ['liquidationMaxDebtCloseFactorPct', beet.u8],
    ['insolvencyRiskUnhealthyLtvPct', beet.u8],
    ['minFullLiquidationValueThreshold', beet.u64],
    ['maxLiquidatableDebtMarketValueAtOnce', beet.u64],
    ['globalUnhealthyBorrowValue', beet.u64],
    ['globalAllowedBorrowValue', beet.u64],
    ['riskCouncil', beetSolana.publicKey],
    ['multiplierPointsTagBoost', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['elevationGroups', beet.uniformFixedSizeArray(elevationGroupBeet, 32)],
    ['elevationGroupPadding', beet.uniformFixedSizeArray(beet.u64, 90)],
    ['padding1', beet.uniformFixedSizeArray(beet.u64, 180)],
  ],
  LendingMarket.fromArgs,
  'LendingMarket'
)
