/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as splToken from '@solana/spl-token'
import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'
import {
  InitObligationArgs,
  initObligationArgsBeet,
} from '../types/InitObligationArgs'

/**
 * @category Instructions
 * @category InitObligation
 * @category generated
 */
export type InitObligationInstructionArgs = {
  args: InitObligationArgs
}
/**
 * @category Instructions
 * @category InitObligation
 * @category generated
 */
export const initObligationStruct = new beet.BeetArgsStruct<
  InitObligationInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['args', initObligationArgsBeet],
  ],
  'InitObligationInstructionArgs'
)
/**
 * Accounts required by the _initObligation_ instruction
 *
 * @property [**signer**] obligationOwner
 * @property [_writable_, **signer**] feePayer
 * @property [_writable_] obligation
 * @property [] lendingMarket
 * @property [] seed1Account
 * @property [] seed2Account
 * @property [] ownerUserMetadata
 * @category Instructions
 * @category InitObligation
 * @category generated
 */
export type InitObligationInstructionAccounts = {
  obligationOwner: web3.PublicKey
  feePayer: web3.PublicKey
  obligation: web3.PublicKey
  lendingMarket: web3.PublicKey
  seed1Account: web3.PublicKey
  seed2Account: web3.PublicKey
  ownerUserMetadata: web3.PublicKey
  rent?: web3.PublicKey
  tokenProgram?: web3.PublicKey
  systemProgram?: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}

export const initObligationInstructionDiscriminator = [
  251, 10, 231, 76, 27, 11, 159, 96,
]

/**
 * Creates a _InitObligation_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category InitObligation
 * @category generated
 */
export function createInitObligationInstruction(
  accounts: InitObligationInstructionAccounts,
  args: InitObligationInstructionArgs,
  programId = new web3.PublicKey('HUHJsverovPJN3sVtv8J8D48fKzeajRtz3Ga4Zmh4RLA')
) {
  const [data] = initObligationStruct.serialize({
    instructionDiscriminator: initObligationInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.obligationOwner,
      isWritable: false,
      isSigner: true,
    },
    {
      pubkey: accounts.feePayer,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.obligation,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.lendingMarket,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.seed1Account,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.seed2Account,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.ownerUserMetadata,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.rent ?? web3.SYSVAR_RENT_PUBKEY,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenProgram ?? splToken.TOKEN_PROGRAM_ID,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
  ]

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
