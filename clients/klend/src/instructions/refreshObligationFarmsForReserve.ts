/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as splToken from '@solana/spl-token'
import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'

/**
 * @category Instructions
 * @category RefreshObligationFarmsForReserve
 * @category generated
 */
export type RefreshObligationFarmsForReserveInstructionArgs = {
  mode: number
}
/**
 * @category Instructions
 * @category RefreshObligationFarmsForReserve
 * @category generated
 */
export const refreshObligationFarmsForReserveStruct = new beet.BeetArgsStruct<
  RefreshObligationFarmsForReserveInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['mode', beet.u8],
  ],
  'RefreshObligationFarmsForReserveInstructionArgs'
)
/**
 * Accounts required by the _refreshObligationFarmsForReserve_ instruction
 *
 * @property [_writable_, **signer**] crank
 * @property [] obligation
 * @property [_writable_] lendingMarketAuthority
 * @property [] reserve
 * @property [_writable_] reserveFarmState
 * @property [_writable_] obligationFarmUserState
 * @property [] lendingMarket
 * @property [] farmsProgram
 * @category Instructions
 * @category RefreshObligationFarmsForReserve
 * @category generated
 */
export type RefreshObligationFarmsForReserveInstructionAccounts = {
  crank: web3.PublicKey
  obligation: web3.PublicKey
  lendingMarketAuthority: web3.PublicKey
  reserve: web3.PublicKey
  reserveFarmState: web3.PublicKey
  obligationFarmUserState: web3.PublicKey
  lendingMarket: web3.PublicKey
  farmsProgram: web3.PublicKey
  rent?: web3.PublicKey
  tokenProgram?: web3.PublicKey
  systemProgram?: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}

export const refreshObligationFarmsForReserveInstructionDiscriminator = [
  140, 144, 253, 21, 10, 74, 248, 3,
]

/**
 * Creates a _RefreshObligationFarmsForReserve_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category RefreshObligationFarmsForReserve
 * @category generated
 */
export function createRefreshObligationFarmsForReserveInstruction(
  accounts: RefreshObligationFarmsForReserveInstructionAccounts,
  args: RefreshObligationFarmsForReserveInstructionArgs,
  programId = new web3.PublicKey('HUHJsverovPJN3sVtv8J8D48fKzeajRtz3Ga4Zmh4RLA')
) {
  const [data] = refreshObligationFarmsForReserveStruct.serialize({
    instructionDiscriminator:
      refreshObligationFarmsForReserveInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.crank,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.obligation,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.lendingMarketAuthority,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.reserve,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.reserveFarmState,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.obligationFarmUserState,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.lendingMarket,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.farmsProgram,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.rent ?? web3.SYSVAR_RENT_PUBKEY,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenProgram ?? splToken.TOKEN_PROGRAM_ID,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
  ]

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
