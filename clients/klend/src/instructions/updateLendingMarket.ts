/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'

/**
 * @category Instructions
 * @category UpdateLendingMarket
 * @category generated
 */
export type UpdateLendingMarketInstructionArgs = {
  mode: beet.bignum
  value: number[] /* size: 72 */
}
/**
 * @category Instructions
 * @category UpdateLendingMarket
 * @category generated
 */
export const updateLendingMarketStruct = new beet.BeetArgsStruct<
  UpdateLendingMarketInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['mode', beet.u64],
    ['value', beet.uniformFixedSizeArray(beet.u8, 72)],
  ],
  'UpdateLendingMarketInstructionArgs'
)
/**
 * Accounts required by the _updateLendingMarket_ instruction
 *
 * @property [**signer**] lendingMarketOwner
 * @property [_writable_] lendingMarket
 * @category Instructions
 * @category UpdateLendingMarket
 * @category generated
 */
export type UpdateLendingMarketInstructionAccounts = {
  lendingMarketOwner: web3.PublicKey
  lendingMarket: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}

export const updateLendingMarketInstructionDiscriminator = [
  209, 157, 53, 210, 97, 180, 31, 45,
]

/**
 * Creates a _UpdateLendingMarket_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category UpdateLendingMarket
 * @category generated
 */
export function createUpdateLendingMarketInstruction(
  accounts: UpdateLendingMarketInstructionAccounts,
  args: UpdateLendingMarketInstructionArgs,
  programId = new web3.PublicKey('HUHJsverovPJN3sVtv8J8D48fKzeajRtz3Ga4Zmh4RLA')
) {
  const [data] = updateLendingMarketStruct.serialize({
    instructionDiscriminator: updateLendingMarketInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.lendingMarketOwner,
      isWritable: false,
      isSigner: true,
    },
    {
      pubkey: accounts.lendingMarket,
      isWritable: true,
      isSigner: false,
    },
  ]

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
