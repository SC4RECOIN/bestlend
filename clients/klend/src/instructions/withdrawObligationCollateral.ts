/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as splToken from '@solana/spl-token'
import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'

/**
 * @category Instructions
 * @category WithdrawObligationCollateral
 * @category generated
 */
export type WithdrawObligationCollateralInstructionArgs = {
  collateralAmount: beet.bignum
}
/**
 * @category Instructions
 * @category WithdrawObligationCollateral
 * @category generated
 */
export const withdrawObligationCollateralStruct = new beet.BeetArgsStruct<
  WithdrawObligationCollateralInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['collateralAmount', beet.u64],
  ],
  'WithdrawObligationCollateralInstructionArgs'
)
/**
 * Accounts required by the _withdrawObligationCollateral_ instruction
 *
 * @property [**signer**] owner
 * @property [_writable_] obligation
 * @property [] lendingMarket
 * @property [] lendingMarketAuthority
 * @property [] withdrawReserve
 * @property [_writable_] reserveSourceCollateral
 * @property [_writable_] userDestinationCollateral
 * @property [] instructionSysvarAccount
 * @category Instructions
 * @category WithdrawObligationCollateral
 * @category generated
 */
export type WithdrawObligationCollateralInstructionAccounts = {
  owner: web3.PublicKey
  obligation: web3.PublicKey
  lendingMarket: web3.PublicKey
  lendingMarketAuthority: web3.PublicKey
  withdrawReserve: web3.PublicKey
  reserveSourceCollateral: web3.PublicKey
  userDestinationCollateral: web3.PublicKey
  tokenProgram?: web3.PublicKey
  instructionSysvarAccount: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}

export const withdrawObligationCollateralInstructionDiscriminator = [
  37, 116, 205, 103, 243, 192, 92, 198,
]

/**
 * Creates a _WithdrawObligationCollateral_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category WithdrawObligationCollateral
 * @category generated
 */
export function createWithdrawObligationCollateralInstruction(
  accounts: WithdrawObligationCollateralInstructionAccounts,
  args: WithdrawObligationCollateralInstructionArgs,
  programId = new web3.PublicKey('HUHJsverovPJN3sVtv8J8D48fKzeajRtz3Ga4Zmh4RLA')
) {
  const [data] = withdrawObligationCollateralStruct.serialize({
    instructionDiscriminator:
      withdrawObligationCollateralInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.owner,
      isWritable: false,
      isSigner: true,
    },
    {
      pubkey: accounts.obligation,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.lendingMarket,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.lendingMarketAuthority,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.withdrawReserve,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.reserveSourceCollateral,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.userDestinationCollateral,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenProgram ?? splToken.TOKEN_PROGRAM_ID,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.instructionSysvarAccount,
      isWritable: false,
      isSigner: false,
    },
  ]

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
