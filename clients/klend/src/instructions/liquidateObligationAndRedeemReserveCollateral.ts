/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as splToken from '@solana/spl-token'
import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'

/**
 * @category Instructions
 * @category LiquidateObligationAndRedeemReserveCollateral
 * @category generated
 */
export type LiquidateObligationAndRedeemReserveCollateralInstructionArgs = {
  liquidityAmount: beet.bignum
  minAcceptableReceivedCollateralAmount: beet.bignum
  maxAllowedLtvOverridePercent: beet.bignum
}
/**
 * @category Instructions
 * @category LiquidateObligationAndRedeemReserveCollateral
 * @category generated
 */
export const liquidateObligationAndRedeemReserveCollateralStruct =
  new beet.BeetArgsStruct<
    LiquidateObligationAndRedeemReserveCollateralInstructionArgs & {
      instructionDiscriminator: number[] /* size: 8 */
    }
  >(
    [
      ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
      ['liquidityAmount', beet.u64],
      ['minAcceptableReceivedCollateralAmount', beet.u64],
      ['maxAllowedLtvOverridePercent', beet.u64],
    ],
    'LiquidateObligationAndRedeemReserveCollateralInstructionArgs'
  )
/**
 * Accounts required by the _liquidateObligationAndRedeemReserveCollateral_ instruction
 *
 * @property [**signer**] liquidator
 * @property [_writable_] obligation
 * @property [] lendingMarket
 * @property [] lendingMarketAuthority
 * @property [_writable_] repayReserve
 * @property [_writable_] repayReserveLiquiditySupply
 * @property [_writable_] withdrawReserve
 * @property [_writable_] withdrawReserveCollateralMint
 * @property [_writable_] withdrawReserveCollateralSupply
 * @property [_writable_] withdrawReserveLiquiditySupply
 * @property [_writable_] withdrawReserveLiquidityFeeReceiver
 * @property [_writable_] userSourceLiquidity
 * @property [_writable_] userDestinationCollateral
 * @property [_writable_] userDestinationLiquidity
 * @property [] instructionSysvarAccount
 * @category Instructions
 * @category LiquidateObligationAndRedeemReserveCollateral
 * @category generated
 */
export type LiquidateObligationAndRedeemReserveCollateralInstructionAccounts = {
  liquidator: web3.PublicKey
  obligation: web3.PublicKey
  lendingMarket: web3.PublicKey
  lendingMarketAuthority: web3.PublicKey
  repayReserve: web3.PublicKey
  repayReserveLiquiditySupply: web3.PublicKey
  withdrawReserve: web3.PublicKey
  withdrawReserveCollateralMint: web3.PublicKey
  withdrawReserveCollateralSupply: web3.PublicKey
  withdrawReserveLiquiditySupply: web3.PublicKey
  withdrawReserveLiquidityFeeReceiver: web3.PublicKey
  userSourceLiquidity: web3.PublicKey
  userDestinationCollateral: web3.PublicKey
  userDestinationLiquidity: web3.PublicKey
  tokenProgram?: web3.PublicKey
  instructionSysvarAccount: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}

export const liquidateObligationAndRedeemReserveCollateralInstructionDiscriminator =
  [177, 71, 154, 188, 226, 133, 74, 55]

/**
 * Creates a _LiquidateObligationAndRedeemReserveCollateral_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category LiquidateObligationAndRedeemReserveCollateral
 * @category generated
 */
export function createLiquidateObligationAndRedeemReserveCollateralInstruction(
  accounts: LiquidateObligationAndRedeemReserveCollateralInstructionAccounts,
  args: LiquidateObligationAndRedeemReserveCollateralInstructionArgs,
  programId = new web3.PublicKey('HUHJsverovPJN3sVtv8J8D48fKzeajRtz3Ga4Zmh4RLA')
) {
  const [data] = liquidateObligationAndRedeemReserveCollateralStruct.serialize({
    instructionDiscriminator:
      liquidateObligationAndRedeemReserveCollateralInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.liquidator,
      isWritable: false,
      isSigner: true,
    },
    {
      pubkey: accounts.obligation,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.lendingMarket,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.lendingMarketAuthority,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.repayReserve,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.repayReserveLiquiditySupply,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.withdrawReserve,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.withdrawReserveCollateralMint,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.withdrawReserveCollateralSupply,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.withdrawReserveLiquiditySupply,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.withdrawReserveLiquidityFeeReceiver,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.userSourceLiquidity,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.userDestinationCollateral,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.userDestinationLiquidity,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenProgram ?? splToken.TOKEN_PROGRAM_ID,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.instructionSysvarAccount,
      isWritable: false,
      isSigner: false,
    },
  ]

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
