/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as splToken from '@solana/spl-token'
import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'

/**
 * @category Instructions
 * @category InitReserve
 * @category generated
 */
export const initReserveStruct = new beet.BeetArgsStruct<{
  instructionDiscriminator: number[] /* size: 8 */
}>(
  [['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)]],
  'InitReserveInstructionArgs'
)
/**
 * Accounts required by the _initReserve_ instruction
 *
 * @property [_writable_, **signer**] lendingMarketOwner
 * @property [] lendingMarket
 * @property [] lendingMarketAuthority
 * @property [_writable_] reserve
 * @property [] reserveLiquidityMint
 * @property [_writable_] reserveLiquiditySupply
 * @property [_writable_] feeReceiver
 * @property [_writable_] reserveCollateralMint
 * @property [_writable_] reserveCollateralSupply
 * @category Instructions
 * @category InitReserve
 * @category generated
 */
export type InitReserveInstructionAccounts = {
  lendingMarketOwner: web3.PublicKey
  lendingMarket: web3.PublicKey
  lendingMarketAuthority: web3.PublicKey
  reserve: web3.PublicKey
  reserveLiquidityMint: web3.PublicKey
  reserveLiquiditySupply: web3.PublicKey
  feeReceiver: web3.PublicKey
  reserveCollateralMint: web3.PublicKey
  reserveCollateralSupply: web3.PublicKey
  rent?: web3.PublicKey
  tokenProgram?: web3.PublicKey
  systemProgram?: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}

export const initReserveInstructionDiscriminator = [
  138, 245, 71, 225, 153, 4, 3, 43,
]

/**
 * Creates a _InitReserve_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @category Instructions
 * @category InitReserve
 * @category generated
 */
export function createInitReserveInstruction(
  accounts: InitReserveInstructionAccounts,
  programId = new web3.PublicKey('HUHJsverovPJN3sVtv8J8D48fKzeajRtz3Ga4Zmh4RLA')
) {
  const [data] = initReserveStruct.serialize({
    instructionDiscriminator: initReserveInstructionDiscriminator,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.lendingMarketOwner,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.lendingMarket,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.lendingMarketAuthority,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.reserve,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.reserveLiquidityMint,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.reserveLiquiditySupply,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.feeReceiver,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.reserveCollateralMint,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.reserveCollateralSupply,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.rent ?? web3.SYSVAR_RENT_PUBKEY,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenProgram ?? splToken.TOKEN_PROGRAM_ID,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
  ]

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
