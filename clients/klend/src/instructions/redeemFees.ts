/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as splToken from '@solana/spl-token'
import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'

/**
 * @category Instructions
 * @category RedeemFees
 * @category generated
 */
export const redeemFeesStruct = new beet.BeetArgsStruct<{
  instructionDiscriminator: number[] /* size: 8 */
}>(
  [['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)]],
  'RedeemFeesInstructionArgs'
)
/**
 * Accounts required by the _redeemFees_ instruction
 *
 * @property [_writable_] reserve
 * @property [_writable_] reserveLiquidityFeeReceiver
 * @property [_writable_] reserveSupplyLiquidity
 * @property [] lendingMarket
 * @property [] lendingMarketAuthority
 * @category Instructions
 * @category RedeemFees
 * @category generated
 */
export type RedeemFeesInstructionAccounts = {
  reserve: web3.PublicKey
  reserveLiquidityFeeReceiver: web3.PublicKey
  reserveSupplyLiquidity: web3.PublicKey
  lendingMarket: web3.PublicKey
  lendingMarketAuthority: web3.PublicKey
  tokenProgram?: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}

export const redeemFeesInstructionDiscriminator = [
  215, 39, 180, 41, 173, 46, 248, 220,
]

/**
 * Creates a _RedeemFees_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @category Instructions
 * @category RedeemFees
 * @category generated
 */
export function createRedeemFeesInstruction(
  accounts: RedeemFeesInstructionAccounts,
  programId = new web3.PublicKey('HUHJsverovPJN3sVtv8J8D48fKzeajRtz3Ga4Zmh4RLA')
) {
  const [data] = redeemFeesStruct.serialize({
    instructionDiscriminator: redeemFeesInstructionDiscriminator,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.reserve,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.reserveLiquidityFeeReceiver,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.reserveSupplyLiquidity,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.lendingMarket,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.lendingMarketAuthority,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenProgram ?? splToken.TOKEN_PROGRAM_ID,
      isWritable: false,
      isSigner: false,
    },
  ]

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
