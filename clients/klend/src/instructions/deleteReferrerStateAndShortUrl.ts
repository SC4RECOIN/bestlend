/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'

/**
 * @category Instructions
 * @category DeleteReferrerStateAndShortUrl
 * @category generated
 */
export const deleteReferrerStateAndShortUrlStruct = new beet.BeetArgsStruct<{
  instructionDiscriminator: number[] /* size: 8 */
}>(
  [['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)]],
  'DeleteReferrerStateAndShortUrlInstructionArgs'
)
/**
 * Accounts required by the _deleteReferrerStateAndShortUrl_ instruction
 *
 * @property [_writable_, **signer**] referrer
 * @property [_writable_] referrerState
 * @property [_writable_] shortUrl
 * @category Instructions
 * @category DeleteReferrerStateAndShortUrl
 * @category generated
 */
export type DeleteReferrerStateAndShortUrlInstructionAccounts = {
  referrer: web3.PublicKey
  referrerState: web3.PublicKey
  shortUrl: web3.PublicKey
  rent?: web3.PublicKey
  systemProgram?: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}

export const deleteReferrerStateAndShortUrlInstructionDiscriminator = [
  153, 185, 99, 28, 228, 179, 187, 150,
]

/**
 * Creates a _DeleteReferrerStateAndShortUrl_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @category Instructions
 * @category DeleteReferrerStateAndShortUrl
 * @category generated
 */
export function createDeleteReferrerStateAndShortUrlInstruction(
  accounts: DeleteReferrerStateAndShortUrlInstructionAccounts,
  programId = new web3.PublicKey('HUHJsverovPJN3sVtv8J8D48fKzeajRtz3Ga4Zmh4RLA')
) {
  const [data] = deleteReferrerStateAndShortUrlStruct.serialize({
    instructionDiscriminator:
      deleteReferrerStateAndShortUrlInstructionDiscriminator,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.referrer,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.referrerState,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.shortUrl,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.rent ?? web3.SYSVAR_RENT_PUBKEY,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
  ]

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
